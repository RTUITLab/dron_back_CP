// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/0B1t322/CP-Rosseti-Back/ent/module"
	"github.com/0B1t322/CP-Rosseti-Back/ent/moduletest"
	"github.com/0B1t322/CP-Rosseti-Back/ent/test"
)

// ModuleTestCreate is the builder for creating a ModuleTest entity.
type ModuleTestCreate struct {
	config
	mutation *ModuleTestMutation
	hooks    []Hook
}

// SetModuleID sets the "module_id" field.
func (mtc *ModuleTestCreate) SetModuleID(i int) *ModuleTestCreate {
	mtc.mutation.SetModuleID(i)
	return mtc
}

// SetTestID sets the "test_id" field.
func (mtc *ModuleTestCreate) SetTestID(i int) *ModuleTestCreate {
	mtc.mutation.SetTestID(i)
	return mtc
}

// SetModule sets the "Module" edge to the Module entity.
func (mtc *ModuleTestCreate) SetModule(m *Module) *ModuleTestCreate {
	return mtc.SetModuleID(m.ID)
}

// SetTest sets the "Test" edge to the Test entity.
func (mtc *ModuleTestCreate) SetTest(t *Test) *ModuleTestCreate {
	return mtc.SetTestID(t.ID)
}

// Mutation returns the ModuleTestMutation object of the builder.
func (mtc *ModuleTestCreate) Mutation() *ModuleTestMutation {
	return mtc.mutation
}

// Save creates the ModuleTest in the database.
func (mtc *ModuleTestCreate) Save(ctx context.Context) (*ModuleTest, error) {
	var (
		err  error
		node *ModuleTest
	)
	if len(mtc.hooks) == 0 {
		if err = mtc.check(); err != nil {
			return nil, err
		}
		node, err = mtc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ModuleTestMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = mtc.check(); err != nil {
				return nil, err
			}
			mtc.mutation = mutation
			if node, err = mtc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(mtc.hooks) - 1; i >= 0; i-- {
			if mtc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = mtc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, mtc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (mtc *ModuleTestCreate) SaveX(ctx context.Context) *ModuleTest {
	v, err := mtc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mtc *ModuleTestCreate) Exec(ctx context.Context) error {
	_, err := mtc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mtc *ModuleTestCreate) ExecX(ctx context.Context) {
	if err := mtc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mtc *ModuleTestCreate) check() error {
	if _, ok := mtc.mutation.ModuleID(); !ok {
		return &ValidationError{Name: "module_id", err: errors.New(`ent: missing required field "module_id"`)}
	}
	if _, ok := mtc.mutation.TestID(); !ok {
		return &ValidationError{Name: "test_id", err: errors.New(`ent: missing required field "test_id"`)}
	}
	if _, ok := mtc.mutation.ModuleID(); !ok {
		return &ValidationError{Name: "Module", err: errors.New("ent: missing required edge \"Module\"")}
	}
	if _, ok := mtc.mutation.TestID(); !ok {
		return &ValidationError{Name: "Test", err: errors.New("ent: missing required edge \"Test\"")}
	}
	return nil
}

func (mtc *ModuleTestCreate) sqlSave(ctx context.Context) (*ModuleTest, error) {
	_node, _spec := mtc.createSpec()
	if err := sqlgraph.CreateNode(ctx, mtc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (mtc *ModuleTestCreate) createSpec() (*ModuleTest, *sqlgraph.CreateSpec) {
	var (
		_node = &ModuleTest{config: mtc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: moduletest.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: moduletest.FieldID,
			},
		}
	)
	if nodes := mtc.mutation.ModuleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   moduletest.ModuleTable,
			Columns: []string{moduletest.ModuleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: module.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ModuleID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := mtc.mutation.TestIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   moduletest.TestTable,
			Columns: []string{moduletest.TestColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: test.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.TestID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ModuleTestCreateBulk is the builder for creating many ModuleTest entities in bulk.
type ModuleTestCreateBulk struct {
	config
	builders []*ModuleTestCreate
}

// Save creates the ModuleTest entities in the database.
func (mtcb *ModuleTestCreateBulk) Save(ctx context.Context) ([]*ModuleTest, error) {
	specs := make([]*sqlgraph.CreateSpec, len(mtcb.builders))
	nodes := make([]*ModuleTest, len(mtcb.builders))
	mutators := make([]Mutator, len(mtcb.builders))
	for i := range mtcb.builders {
		func(i int, root context.Context) {
			builder := mtcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ModuleTestMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, mtcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, mtcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, mtcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (mtcb *ModuleTestCreateBulk) SaveX(ctx context.Context) []*ModuleTest {
	v, err := mtcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mtcb *ModuleTestCreateBulk) Exec(ctx context.Context) error {
	_, err := mtcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mtcb *ModuleTestCreateBulk) ExecX(ctx context.Context) {
	if err := mtcb.Exec(ctx); err != nil {
		panic(err)
	}
}
