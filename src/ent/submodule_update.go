// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/0B1t322/CP-Rosseti-Back/ent/module"
	"github.com/0B1t322/CP-Rosseti-Back/ent/predicate"
	"github.com/0B1t322/CP-Rosseti-Back/ent/submodule"
	"github.com/0B1t322/CP-Rosseti-Back/ent/submoduletest"
)

// SubModuleUpdate is the builder for updating SubModule entities.
type SubModuleUpdate struct {
	config
	hooks    []Hook
	mutation *SubModuleMutation
}

// Where appends a list predicates to the SubModuleUpdate builder.
func (smu *SubModuleUpdate) Where(ps ...predicate.SubModule) *SubModuleUpdate {
	smu.mutation.Where(ps...)
	return smu
}

// SetName sets the "name" field.
func (smu *SubModuleUpdate) SetName(s string) *SubModuleUpdate {
	smu.mutation.SetName(s)
	return smu
}

// SetText sets the "text" field.
func (smu *SubModuleUpdate) SetText(s string) *SubModuleUpdate {
	smu.mutation.SetText(s)
	return smu
}

// SetModuleID sets the "Module" edge to the Module entity by ID.
func (smu *SubModuleUpdate) SetModuleID(id int) *SubModuleUpdate {
	smu.mutation.SetModuleID(id)
	return smu
}

// SetNillableModuleID sets the "Module" edge to the Module entity by ID if the given value is not nil.
func (smu *SubModuleUpdate) SetNillableModuleID(id *int) *SubModuleUpdate {
	if id != nil {
		smu = smu.SetModuleID(*id)
	}
	return smu
}

// SetModule sets the "Module" edge to the Module entity.
func (smu *SubModuleUpdate) SetModule(m *Module) *SubModuleUpdate {
	return smu.SetModuleID(m.ID)
}

// SetTestID sets the "Test" edge to the SubModuleTest entity by ID.
func (smu *SubModuleUpdate) SetTestID(id int) *SubModuleUpdate {
	smu.mutation.SetTestID(id)
	return smu
}

// SetNillableTestID sets the "Test" edge to the SubModuleTest entity by ID if the given value is not nil.
func (smu *SubModuleUpdate) SetNillableTestID(id *int) *SubModuleUpdate {
	if id != nil {
		smu = smu.SetTestID(*id)
	}
	return smu
}

// SetTest sets the "Test" edge to the SubModuleTest entity.
func (smu *SubModuleUpdate) SetTest(s *SubModuleTest) *SubModuleUpdate {
	return smu.SetTestID(s.ID)
}

// Mutation returns the SubModuleMutation object of the builder.
func (smu *SubModuleUpdate) Mutation() *SubModuleMutation {
	return smu.mutation
}

// ClearModule clears the "Module" edge to the Module entity.
func (smu *SubModuleUpdate) ClearModule() *SubModuleUpdate {
	smu.mutation.ClearModule()
	return smu
}

// ClearTest clears the "Test" edge to the SubModuleTest entity.
func (smu *SubModuleUpdate) ClearTest() *SubModuleUpdate {
	smu.mutation.ClearTest()
	return smu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (smu *SubModuleUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(smu.hooks) == 0 {
		affected, err = smu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SubModuleMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			smu.mutation = mutation
			affected, err = smu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(smu.hooks) - 1; i >= 0; i-- {
			if smu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = smu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, smu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (smu *SubModuleUpdate) SaveX(ctx context.Context) int {
	affected, err := smu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (smu *SubModuleUpdate) Exec(ctx context.Context) error {
	_, err := smu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (smu *SubModuleUpdate) ExecX(ctx context.Context) {
	if err := smu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (smu *SubModuleUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   submodule.Table,
			Columns: submodule.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: submodule.FieldID,
			},
		},
	}
	if ps := smu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := smu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: submodule.FieldName,
		})
	}
	if value, ok := smu.mutation.Text(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: submodule.FieldText,
		})
	}
	if smu.mutation.ModuleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   submodule.ModuleTable,
			Columns: []string{submodule.ModuleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: module.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := smu.mutation.ModuleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   submodule.ModuleTable,
			Columns: []string{submodule.ModuleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: module.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if smu.mutation.TestCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   submodule.TestTable,
			Columns: []string{submodule.TestColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: submoduletest.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := smu.mutation.TestIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   submodule.TestTable,
			Columns: []string{submodule.TestColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: submoduletest.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, smu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{submodule.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// SubModuleUpdateOne is the builder for updating a single SubModule entity.
type SubModuleUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SubModuleMutation
}

// SetName sets the "name" field.
func (smuo *SubModuleUpdateOne) SetName(s string) *SubModuleUpdateOne {
	smuo.mutation.SetName(s)
	return smuo
}

// SetText sets the "text" field.
func (smuo *SubModuleUpdateOne) SetText(s string) *SubModuleUpdateOne {
	smuo.mutation.SetText(s)
	return smuo
}

// SetModuleID sets the "Module" edge to the Module entity by ID.
func (smuo *SubModuleUpdateOne) SetModuleID(id int) *SubModuleUpdateOne {
	smuo.mutation.SetModuleID(id)
	return smuo
}

// SetNillableModuleID sets the "Module" edge to the Module entity by ID if the given value is not nil.
func (smuo *SubModuleUpdateOne) SetNillableModuleID(id *int) *SubModuleUpdateOne {
	if id != nil {
		smuo = smuo.SetModuleID(*id)
	}
	return smuo
}

// SetModule sets the "Module" edge to the Module entity.
func (smuo *SubModuleUpdateOne) SetModule(m *Module) *SubModuleUpdateOne {
	return smuo.SetModuleID(m.ID)
}

// SetTestID sets the "Test" edge to the SubModuleTest entity by ID.
func (smuo *SubModuleUpdateOne) SetTestID(id int) *SubModuleUpdateOne {
	smuo.mutation.SetTestID(id)
	return smuo
}

// SetNillableTestID sets the "Test" edge to the SubModuleTest entity by ID if the given value is not nil.
func (smuo *SubModuleUpdateOne) SetNillableTestID(id *int) *SubModuleUpdateOne {
	if id != nil {
		smuo = smuo.SetTestID(*id)
	}
	return smuo
}

// SetTest sets the "Test" edge to the SubModuleTest entity.
func (smuo *SubModuleUpdateOne) SetTest(s *SubModuleTest) *SubModuleUpdateOne {
	return smuo.SetTestID(s.ID)
}

// Mutation returns the SubModuleMutation object of the builder.
func (smuo *SubModuleUpdateOne) Mutation() *SubModuleMutation {
	return smuo.mutation
}

// ClearModule clears the "Module" edge to the Module entity.
func (smuo *SubModuleUpdateOne) ClearModule() *SubModuleUpdateOne {
	smuo.mutation.ClearModule()
	return smuo
}

// ClearTest clears the "Test" edge to the SubModuleTest entity.
func (smuo *SubModuleUpdateOne) ClearTest() *SubModuleUpdateOne {
	smuo.mutation.ClearTest()
	return smuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (smuo *SubModuleUpdateOne) Select(field string, fields ...string) *SubModuleUpdateOne {
	smuo.fields = append([]string{field}, fields...)
	return smuo
}

// Save executes the query and returns the updated SubModule entity.
func (smuo *SubModuleUpdateOne) Save(ctx context.Context) (*SubModule, error) {
	var (
		err  error
		node *SubModule
	)
	if len(smuo.hooks) == 0 {
		node, err = smuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SubModuleMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			smuo.mutation = mutation
			node, err = smuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(smuo.hooks) - 1; i >= 0; i-- {
			if smuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = smuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, smuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (smuo *SubModuleUpdateOne) SaveX(ctx context.Context) *SubModule {
	node, err := smuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (smuo *SubModuleUpdateOne) Exec(ctx context.Context) error {
	_, err := smuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (smuo *SubModuleUpdateOne) ExecX(ctx context.Context) {
	if err := smuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (smuo *SubModuleUpdateOne) sqlSave(ctx context.Context) (_node *SubModule, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   submodule.Table,
			Columns: submodule.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: submodule.FieldID,
			},
		},
	}
	id, ok := smuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing SubModule.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := smuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, submodule.FieldID)
		for _, f := range fields {
			if !submodule.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != submodule.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := smuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := smuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: submodule.FieldName,
		})
	}
	if value, ok := smuo.mutation.Text(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: submodule.FieldText,
		})
	}
	if smuo.mutation.ModuleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   submodule.ModuleTable,
			Columns: []string{submodule.ModuleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: module.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := smuo.mutation.ModuleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   submodule.ModuleTable,
			Columns: []string{submodule.ModuleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: module.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if smuo.mutation.TestCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   submodule.TestTable,
			Columns: []string{submodule.TestColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: submoduletest.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := smuo.mutation.TestIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   submodule.TestTable,
			Columns: []string{submodule.TestColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: submoduletest.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &SubModule{config: smuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, smuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{submodule.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
