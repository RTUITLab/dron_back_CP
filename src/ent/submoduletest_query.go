// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/0B1t322/CP-Rosseti-Back/ent/predicate"
	"github.com/0B1t322/CP-Rosseti-Back/ent/submodule"
	"github.com/0B1t322/CP-Rosseti-Back/ent/submoduletest"
	"github.com/0B1t322/CP-Rosseti-Back/ent/theoreticaltest"
)

// SubModuleTestQuery is the builder for querying SubModuleTest entities.
type SubModuleTestQuery struct {
	config
	limit      *int
	offset     *int
	unique     *bool
	order      []OrderFunc
	fields     []string
	predicates []predicate.SubModuleTest
	// eager-loading edges.
	withSubModule *SubModuleQuery
	withTherTest  *TheoreticalTestQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the SubModuleTestQuery builder.
func (smtq *SubModuleTestQuery) Where(ps ...predicate.SubModuleTest) *SubModuleTestQuery {
	smtq.predicates = append(smtq.predicates, ps...)
	return smtq
}

// Limit adds a limit step to the query.
func (smtq *SubModuleTestQuery) Limit(limit int) *SubModuleTestQuery {
	smtq.limit = &limit
	return smtq
}

// Offset adds an offset step to the query.
func (smtq *SubModuleTestQuery) Offset(offset int) *SubModuleTestQuery {
	smtq.offset = &offset
	return smtq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (smtq *SubModuleTestQuery) Unique(unique bool) *SubModuleTestQuery {
	smtq.unique = &unique
	return smtq
}

// Order adds an order step to the query.
func (smtq *SubModuleTestQuery) Order(o ...OrderFunc) *SubModuleTestQuery {
	smtq.order = append(smtq.order, o...)
	return smtq
}

// QuerySubModule chains the current query on the "SubModule" edge.
func (smtq *SubModuleTestQuery) QuerySubModule() *SubModuleQuery {
	query := &SubModuleQuery{config: smtq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := smtq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := smtq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(submoduletest.Table, submoduletest.FieldID, selector),
			sqlgraph.To(submodule.Table, submodule.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, submoduletest.SubModuleTable, submoduletest.SubModuleColumn),
		)
		fromU = sqlgraph.SetNeighbors(smtq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryTherTest chains the current query on the "TherTest" edge.
func (smtq *SubModuleTestQuery) QueryTherTest() *TheoreticalTestQuery {
	query := &TheoreticalTestQuery{config: smtq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := smtq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := smtq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(submoduletest.Table, submoduletest.FieldID, selector),
			sqlgraph.To(theoreticaltest.Table, theoreticaltest.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, submoduletest.TherTestTable, submoduletest.TherTestColumn),
		)
		fromU = sqlgraph.SetNeighbors(smtq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first SubModuleTest entity from the query.
// Returns a *NotFoundError when no SubModuleTest was found.
func (smtq *SubModuleTestQuery) First(ctx context.Context) (*SubModuleTest, error) {
	nodes, err := smtq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{submoduletest.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (smtq *SubModuleTestQuery) FirstX(ctx context.Context) *SubModuleTest {
	node, err := smtq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first SubModuleTest ID from the query.
// Returns a *NotFoundError when no SubModuleTest ID was found.
func (smtq *SubModuleTestQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = smtq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{submoduletest.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (smtq *SubModuleTestQuery) FirstIDX(ctx context.Context) int {
	id, err := smtq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single SubModuleTest entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when exactly one SubModuleTest entity is not found.
// Returns a *NotFoundError when no SubModuleTest entities are found.
func (smtq *SubModuleTestQuery) Only(ctx context.Context) (*SubModuleTest, error) {
	nodes, err := smtq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{submoduletest.Label}
	default:
		return nil, &NotSingularError{submoduletest.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (smtq *SubModuleTestQuery) OnlyX(ctx context.Context) *SubModuleTest {
	node, err := smtq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only SubModuleTest ID in the query.
// Returns a *NotSingularError when exactly one SubModuleTest ID is not found.
// Returns a *NotFoundError when no entities are found.
func (smtq *SubModuleTestQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = smtq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{submoduletest.Label}
	default:
		err = &NotSingularError{submoduletest.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (smtq *SubModuleTestQuery) OnlyIDX(ctx context.Context) int {
	id, err := smtq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of SubModuleTests.
func (smtq *SubModuleTestQuery) All(ctx context.Context) ([]*SubModuleTest, error) {
	if err := smtq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return smtq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (smtq *SubModuleTestQuery) AllX(ctx context.Context) []*SubModuleTest {
	nodes, err := smtq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of SubModuleTest IDs.
func (smtq *SubModuleTestQuery) IDs(ctx context.Context) ([]int, error) {
	var ids []int
	if err := smtq.Select(submoduletest.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (smtq *SubModuleTestQuery) IDsX(ctx context.Context) []int {
	ids, err := smtq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (smtq *SubModuleTestQuery) Count(ctx context.Context) (int, error) {
	if err := smtq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return smtq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (smtq *SubModuleTestQuery) CountX(ctx context.Context) int {
	count, err := smtq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (smtq *SubModuleTestQuery) Exist(ctx context.Context) (bool, error) {
	if err := smtq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return smtq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (smtq *SubModuleTestQuery) ExistX(ctx context.Context) bool {
	exist, err := smtq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the SubModuleTestQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (smtq *SubModuleTestQuery) Clone() *SubModuleTestQuery {
	if smtq == nil {
		return nil
	}
	return &SubModuleTestQuery{
		config:        smtq.config,
		limit:         smtq.limit,
		offset:        smtq.offset,
		order:         append([]OrderFunc{}, smtq.order...),
		predicates:    append([]predicate.SubModuleTest{}, smtq.predicates...),
		withSubModule: smtq.withSubModule.Clone(),
		withTherTest:  smtq.withTherTest.Clone(),
		// clone intermediate query.
		sql:  smtq.sql.Clone(),
		path: smtq.path,
	}
}

// WithSubModule tells the query-builder to eager-load the nodes that are connected to
// the "SubModule" edge. The optional arguments are used to configure the query builder of the edge.
func (smtq *SubModuleTestQuery) WithSubModule(opts ...func(*SubModuleQuery)) *SubModuleTestQuery {
	query := &SubModuleQuery{config: smtq.config}
	for _, opt := range opts {
		opt(query)
	}
	smtq.withSubModule = query
	return smtq
}

// WithTherTest tells the query-builder to eager-load the nodes that are connected to
// the "TherTest" edge. The optional arguments are used to configure the query builder of the edge.
func (smtq *SubModuleTestQuery) WithTherTest(opts ...func(*TheoreticalTestQuery)) *SubModuleTestQuery {
	query := &TheoreticalTestQuery{config: smtq.config}
	for _, opt := range opts {
		opt(query)
	}
	smtq.withTherTest = query
	return smtq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		SubmoduleID int `json:"submodule_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.SubModuleTest.Query().
//		GroupBy(submoduletest.FieldSubmoduleID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (smtq *SubModuleTestQuery) GroupBy(field string, fields ...string) *SubModuleTestGroupBy {
	group := &SubModuleTestGroupBy{config: smtq.config}
	group.fields = append([]string{field}, fields...)
	group.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := smtq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return smtq.sqlQuery(ctx), nil
	}
	return group
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		SubmoduleID int `json:"submodule_id,omitempty"`
//	}
//
//	client.SubModuleTest.Query().
//		Select(submoduletest.FieldSubmoduleID).
//		Scan(ctx, &v)
//
func (smtq *SubModuleTestQuery) Select(fields ...string) *SubModuleTestSelect {
	smtq.fields = append(smtq.fields, fields...)
	return &SubModuleTestSelect{SubModuleTestQuery: smtq}
}

func (smtq *SubModuleTestQuery) prepareQuery(ctx context.Context) error {
	for _, f := range smtq.fields {
		if !submoduletest.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if smtq.path != nil {
		prev, err := smtq.path(ctx)
		if err != nil {
			return err
		}
		smtq.sql = prev
	}
	return nil
}

func (smtq *SubModuleTestQuery) sqlAll(ctx context.Context) ([]*SubModuleTest, error) {
	var (
		nodes       = []*SubModuleTest{}
		_spec       = smtq.querySpec()
		loadedTypes = [2]bool{
			smtq.withSubModule != nil,
			smtq.withTherTest != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]interface{}, error) {
		node := &SubModuleTest{config: smtq.config}
		nodes = append(nodes, node)
		return node.scanValues(columns)
	}
	_spec.Assign = func(columns []string, values []interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("ent: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if err := sqlgraph.QueryNodes(ctx, smtq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}

	if query := smtq.withSubModule; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*SubModuleTest)
		for i := range nodes {
			fk := nodes[i].SubmoduleID
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(submodule.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "submodule_id" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.SubModule = n
			}
		}
	}

	if query := smtq.withTherTest; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int]*SubModuleTest)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
		}
		query.Where(predicate.TheoreticalTest(func(s *sql.Selector) {
			s.Where(sql.InValues(submoduletest.TherTestColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.SubmoduletestID
			node, ok := nodeids[fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "submoduletest_id" returned %v for node %v`, fk, n.ID)
			}
			node.Edges.TherTest = n
		}
	}

	return nodes, nil
}

func (smtq *SubModuleTestQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := smtq.querySpec()
	return sqlgraph.CountNodes(ctx, smtq.driver, _spec)
}

func (smtq *SubModuleTestQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := smtq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %w", err)
	}
	return n > 0, nil
}

func (smtq *SubModuleTestQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   submoduletest.Table,
			Columns: submoduletest.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: submoduletest.FieldID,
			},
		},
		From:   smtq.sql,
		Unique: true,
	}
	if unique := smtq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := smtq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, submoduletest.FieldID)
		for i := range fields {
			if fields[i] != submoduletest.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := smtq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := smtq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := smtq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := smtq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (smtq *SubModuleTestQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(smtq.driver.Dialect())
	t1 := builder.Table(submoduletest.Table)
	columns := smtq.fields
	if len(columns) == 0 {
		columns = submoduletest.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if smtq.sql != nil {
		selector = smtq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	for _, p := range smtq.predicates {
		p(selector)
	}
	for _, p := range smtq.order {
		p(selector)
	}
	if offset := smtq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := smtq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// SubModuleTestGroupBy is the group-by builder for SubModuleTest entities.
type SubModuleTestGroupBy struct {
	config
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (smtgb *SubModuleTestGroupBy) Aggregate(fns ...AggregateFunc) *SubModuleTestGroupBy {
	smtgb.fns = append(smtgb.fns, fns...)
	return smtgb
}

// Scan applies the group-by query and scans the result into the given value.
func (smtgb *SubModuleTestGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := smtgb.path(ctx)
	if err != nil {
		return err
	}
	smtgb.sql = query
	return smtgb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (smtgb *SubModuleTestGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := smtgb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by.
// It is only allowed when executing a group-by query with one field.
func (smtgb *SubModuleTestGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(smtgb.fields) > 1 {
		return nil, errors.New("ent: SubModuleTestGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := smtgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (smtgb *SubModuleTestGroupBy) StringsX(ctx context.Context) []string {
	v, err := smtgb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (smtgb *SubModuleTestGroupBy) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = smtgb.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{submoduletest.Label}
	default:
		err = fmt.Errorf("ent: SubModuleTestGroupBy.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (smtgb *SubModuleTestGroupBy) StringX(ctx context.Context) string {
	v, err := smtgb.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by.
// It is only allowed when executing a group-by query with one field.
func (smtgb *SubModuleTestGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(smtgb.fields) > 1 {
		return nil, errors.New("ent: SubModuleTestGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := smtgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (smtgb *SubModuleTestGroupBy) IntsX(ctx context.Context) []int {
	v, err := smtgb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (smtgb *SubModuleTestGroupBy) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = smtgb.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{submoduletest.Label}
	default:
		err = fmt.Errorf("ent: SubModuleTestGroupBy.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (smtgb *SubModuleTestGroupBy) IntX(ctx context.Context) int {
	v, err := smtgb.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by.
// It is only allowed when executing a group-by query with one field.
func (smtgb *SubModuleTestGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(smtgb.fields) > 1 {
		return nil, errors.New("ent: SubModuleTestGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := smtgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (smtgb *SubModuleTestGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := smtgb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (smtgb *SubModuleTestGroupBy) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = smtgb.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{submoduletest.Label}
	default:
		err = fmt.Errorf("ent: SubModuleTestGroupBy.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (smtgb *SubModuleTestGroupBy) Float64X(ctx context.Context) float64 {
	v, err := smtgb.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by.
// It is only allowed when executing a group-by query with one field.
func (smtgb *SubModuleTestGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(smtgb.fields) > 1 {
		return nil, errors.New("ent: SubModuleTestGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := smtgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (smtgb *SubModuleTestGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := smtgb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (smtgb *SubModuleTestGroupBy) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = smtgb.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{submoduletest.Label}
	default:
		err = fmt.Errorf("ent: SubModuleTestGroupBy.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (smtgb *SubModuleTestGroupBy) BoolX(ctx context.Context) bool {
	v, err := smtgb.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (smtgb *SubModuleTestGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range smtgb.fields {
		if !submoduletest.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := smtgb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := smtgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (smtgb *SubModuleTestGroupBy) sqlQuery() *sql.Selector {
	selector := smtgb.sql.Select()
	aggregation := make([]string, 0, len(smtgb.fns))
	for _, fn := range smtgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	// If no columns were selected in a custom aggregation function, the default
	// selection is the fields used for "group-by", and the aggregation functions.
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(smtgb.fields)+len(smtgb.fns))
		for _, f := range smtgb.fields {
			columns = append(columns, selector.C(f))
		}
		for _, c := range aggregation {
			columns = append(columns, c)
		}
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(smtgb.fields...)...)
}

// SubModuleTestSelect is the builder for selecting fields of SubModuleTest entities.
type SubModuleTestSelect struct {
	*SubModuleTestQuery
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (smts *SubModuleTestSelect) Scan(ctx context.Context, v interface{}) error {
	if err := smts.prepareQuery(ctx); err != nil {
		return err
	}
	smts.sql = smts.SubModuleTestQuery.sqlQuery(ctx)
	return smts.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (smts *SubModuleTestSelect) ScanX(ctx context.Context, v interface{}) {
	if err := smts.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from a selector. It is only allowed when selecting one field.
func (smts *SubModuleTestSelect) Strings(ctx context.Context) ([]string, error) {
	if len(smts.fields) > 1 {
		return nil, errors.New("ent: SubModuleTestSelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := smts.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (smts *SubModuleTestSelect) StringsX(ctx context.Context) []string {
	v, err := smts.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a selector. It is only allowed when selecting one field.
func (smts *SubModuleTestSelect) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = smts.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{submoduletest.Label}
	default:
		err = fmt.Errorf("ent: SubModuleTestSelect.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (smts *SubModuleTestSelect) StringX(ctx context.Context) string {
	v, err := smts.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from a selector. It is only allowed when selecting one field.
func (smts *SubModuleTestSelect) Ints(ctx context.Context) ([]int, error) {
	if len(smts.fields) > 1 {
		return nil, errors.New("ent: SubModuleTestSelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := smts.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (smts *SubModuleTestSelect) IntsX(ctx context.Context) []int {
	v, err := smts.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a selector. It is only allowed when selecting one field.
func (smts *SubModuleTestSelect) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = smts.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{submoduletest.Label}
	default:
		err = fmt.Errorf("ent: SubModuleTestSelect.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (smts *SubModuleTestSelect) IntX(ctx context.Context) int {
	v, err := smts.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from a selector. It is only allowed when selecting one field.
func (smts *SubModuleTestSelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(smts.fields) > 1 {
		return nil, errors.New("ent: SubModuleTestSelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := smts.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (smts *SubModuleTestSelect) Float64sX(ctx context.Context) []float64 {
	v, err := smts.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a selector. It is only allowed when selecting one field.
func (smts *SubModuleTestSelect) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = smts.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{submoduletest.Label}
	default:
		err = fmt.Errorf("ent: SubModuleTestSelect.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (smts *SubModuleTestSelect) Float64X(ctx context.Context) float64 {
	v, err := smts.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from a selector. It is only allowed when selecting one field.
func (smts *SubModuleTestSelect) Bools(ctx context.Context) ([]bool, error) {
	if len(smts.fields) > 1 {
		return nil, errors.New("ent: SubModuleTestSelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := smts.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (smts *SubModuleTestSelect) BoolsX(ctx context.Context) []bool {
	v, err := smts.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a selector. It is only allowed when selecting one field.
func (smts *SubModuleTestSelect) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = smts.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{submoduletest.Label}
	default:
		err = fmt.Errorf("ent: SubModuleTestSelect.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (smts *SubModuleTestSelect) BoolX(ctx context.Context) bool {
	v, err := smts.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (smts *SubModuleTestSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := smts.sql.Query()
	if err := smts.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
