// Code generated by entc, DO NOT EDIT.

package question

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/0B1t322/CP-Rosseti-Back/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Question {
	return predicate.Question(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Question {
	return predicate.Question(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Question {
	return predicate.Question(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Question {
	return predicate.Question(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Question {
	return predicate.Question(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Question {
	return predicate.Question(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Question {
	return predicate.Question(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Question {
	return predicate.Question(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Question {
	return predicate.Question(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// TheoricalTestID applies equality check predicate on the "theorical_test_id" field. It's identical to TheoricalTestIDEQ.
func TheoricalTestID(v int) predicate.Question {
	return predicate.Question(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTheoricalTestID), v))
	})
}

// Question applies equality check predicate on the "question" field. It's identical to QuestionEQ.
func Question(v string) predicate.Question {
	return predicate.Question(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldQuestion), v))
	})
}

// TheoricalTestIDEQ applies the EQ predicate on the "theorical_test_id" field.
func TheoricalTestIDEQ(v int) predicate.Question {
	return predicate.Question(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTheoricalTestID), v))
	})
}

// TheoricalTestIDNEQ applies the NEQ predicate on the "theorical_test_id" field.
func TheoricalTestIDNEQ(v int) predicate.Question {
	return predicate.Question(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTheoricalTestID), v))
	})
}

// TheoricalTestIDIn applies the In predicate on the "theorical_test_id" field.
func TheoricalTestIDIn(vs ...int) predicate.Question {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Question(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTheoricalTestID), v...))
	})
}

// TheoricalTestIDNotIn applies the NotIn predicate on the "theorical_test_id" field.
func TheoricalTestIDNotIn(vs ...int) predicate.Question {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Question(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTheoricalTestID), v...))
	})
}

// QuestionEQ applies the EQ predicate on the "question" field.
func QuestionEQ(v string) predicate.Question {
	return predicate.Question(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldQuestion), v))
	})
}

// QuestionNEQ applies the NEQ predicate on the "question" field.
func QuestionNEQ(v string) predicate.Question {
	return predicate.Question(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldQuestion), v))
	})
}

// QuestionIn applies the In predicate on the "question" field.
func QuestionIn(vs ...string) predicate.Question {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Question(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldQuestion), v...))
	})
}

// QuestionNotIn applies the NotIn predicate on the "question" field.
func QuestionNotIn(vs ...string) predicate.Question {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Question(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldQuestion), v...))
	})
}

// QuestionGT applies the GT predicate on the "question" field.
func QuestionGT(v string) predicate.Question {
	return predicate.Question(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldQuestion), v))
	})
}

// QuestionGTE applies the GTE predicate on the "question" field.
func QuestionGTE(v string) predicate.Question {
	return predicate.Question(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldQuestion), v))
	})
}

// QuestionLT applies the LT predicate on the "question" field.
func QuestionLT(v string) predicate.Question {
	return predicate.Question(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldQuestion), v))
	})
}

// QuestionLTE applies the LTE predicate on the "question" field.
func QuestionLTE(v string) predicate.Question {
	return predicate.Question(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldQuestion), v))
	})
}

// QuestionContains applies the Contains predicate on the "question" field.
func QuestionContains(v string) predicate.Question {
	return predicate.Question(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldQuestion), v))
	})
}

// QuestionHasPrefix applies the HasPrefix predicate on the "question" field.
func QuestionHasPrefix(v string) predicate.Question {
	return predicate.Question(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldQuestion), v))
	})
}

// QuestionHasSuffix applies the HasSuffix predicate on the "question" field.
func QuestionHasSuffix(v string) predicate.Question {
	return predicate.Question(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldQuestion), v))
	})
}

// QuestionEqualFold applies the EqualFold predicate on the "question" field.
func QuestionEqualFold(v string) predicate.Question {
	return predicate.Question(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldQuestion), v))
	})
}

// QuestionContainsFold applies the ContainsFold predicate on the "question" field.
func QuestionContainsFold(v string) predicate.Question {
	return predicate.Question(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldQuestion), v))
	})
}

// HasTheoreticalTest applies the HasEdge predicate on the "TheoreticalTest" edge.
func HasTheoreticalTest() predicate.Question {
	return predicate.Question(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(TheoreticalTestTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, TheoreticalTestTable, TheoreticalTestColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTheoreticalTestWith applies the HasEdge predicate on the "TheoreticalTest" edge with a given conditions (other predicates).
func HasTheoreticalTestWith(preds ...predicate.TheoreticalTest) predicate.Question {
	return predicate.Question(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(TheoreticalTestInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, TheoreticalTestTable, TheoreticalTestColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasAnswer applies the HasEdge predicate on the "Answer" edge.
func HasAnswer() predicate.Question {
	return predicate.Question(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(AnswerTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, AnswerTable, AnswerColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAnswerWith applies the HasEdge predicate on the "Answer" edge with a given conditions (other predicates).
func HasAnswerWith(preds ...predicate.Answer) predicate.Question {
	return predicate.Question(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(AnswerInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, AnswerTable, AnswerColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTryAnswer applies the HasEdge predicate on the "TryAnswer" edge.
func HasTryAnswer() predicate.Question {
	return predicate.Question(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(TryAnswerTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, TryAnswerTable, TryAnswerColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTryAnswerWith applies the HasEdge predicate on the "TryAnswer" edge with a given conditions (other predicates).
func HasTryAnswerWith(preds ...predicate.TryAnswer) predicate.Question {
	return predicate.Question(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(TryAnswerInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, TryAnswerTable, TryAnswerColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Question) predicate.Question {
	return predicate.Question(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Question) predicate.Question {
	return predicate.Question(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Question) predicate.Question {
	return predicate.Question(func(s *sql.Selector) {
		p(s.Not())
	})
}
