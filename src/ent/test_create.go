// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/0B1t322/CP-Rosseti-Back/ent/moduletest"
	"github.com/0B1t322/CP-Rosseti-Back/ent/practtest"
	"github.com/0B1t322/CP-Rosseti-Back/ent/submoduletest"
	"github.com/0B1t322/CP-Rosseti-Back/ent/test"
	"github.com/0B1t322/CP-Rosseti-Back/ent/theoreticaltest"
)

// TestCreate is the builder for creating a Test entity.
type TestCreate struct {
	config
	mutation *TestMutation
	hooks    []Hook
}

// SetTestType sets the "TestType" field.
func (tc *TestCreate) SetTestType(s string) *TestCreate {
	tc.mutation.SetTestType(s)
	return tc
}

// AddModuleTestIDs adds the "ModuleTest" edge to the ModuleTest entity by IDs.
func (tc *TestCreate) AddModuleTestIDs(ids ...int) *TestCreate {
	tc.mutation.AddModuleTestIDs(ids...)
	return tc
}

// AddModuleTest adds the "ModuleTest" edges to the ModuleTest entity.
func (tc *TestCreate) AddModuleTest(m ...*ModuleTest) *TestCreate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return tc.AddModuleTestIDs(ids...)
}

// AddSubmoduleTestIDs adds the "SubmoduleTest" edge to the SubModuleTest entity by IDs.
func (tc *TestCreate) AddSubmoduleTestIDs(ids ...int) *TestCreate {
	tc.mutation.AddSubmoduleTestIDs(ids...)
	return tc
}

// AddSubmoduleTest adds the "SubmoduleTest" edges to the SubModuleTest entity.
func (tc *TestCreate) AddSubmoduleTest(s ...*SubModuleTest) *TestCreate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return tc.AddSubmoduleTestIDs(ids...)
}

// AddTherTestIDs adds the "TherTest" edge to the TheoreticalTest entity by IDs.
func (tc *TestCreate) AddTherTestIDs(ids ...int) *TestCreate {
	tc.mutation.AddTherTestIDs(ids...)
	return tc
}

// AddTherTest adds the "TherTest" edges to the TheoreticalTest entity.
func (tc *TestCreate) AddTherTest(t ...*TheoreticalTest) *TestCreate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tc.AddTherTestIDs(ids...)
}

// AddPractTestIDs adds the "PractTest" edge to the PractTest entity by IDs.
func (tc *TestCreate) AddPractTestIDs(ids ...int) *TestCreate {
	tc.mutation.AddPractTestIDs(ids...)
	return tc
}

// AddPractTest adds the "PractTest" edges to the PractTest entity.
func (tc *TestCreate) AddPractTest(p ...*PractTest) *TestCreate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return tc.AddPractTestIDs(ids...)
}

// Mutation returns the TestMutation object of the builder.
func (tc *TestCreate) Mutation() *TestMutation {
	return tc.mutation
}

// Save creates the Test in the database.
func (tc *TestCreate) Save(ctx context.Context) (*Test, error) {
	var (
		err  error
		node *Test
	)
	if len(tc.hooks) == 0 {
		if err = tc.check(); err != nil {
			return nil, err
		}
		node, err = tc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TestMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = tc.check(); err != nil {
				return nil, err
			}
			tc.mutation = mutation
			if node, err = tc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(tc.hooks) - 1; i >= 0; i-- {
			if tc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = tc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (tc *TestCreate) SaveX(ctx context.Context) *Test {
	v, err := tc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tc *TestCreate) Exec(ctx context.Context) error {
	_, err := tc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tc *TestCreate) ExecX(ctx context.Context) {
	if err := tc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tc *TestCreate) check() error {
	if _, ok := tc.mutation.TestType(); !ok {
		return &ValidationError{Name: "TestType", err: errors.New(`ent: missing required field "TestType"`)}
	}
	return nil
}

func (tc *TestCreate) sqlSave(ctx context.Context) (*Test, error) {
	_node, _spec := tc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (tc *TestCreate) createSpec() (*Test, *sqlgraph.CreateSpec) {
	var (
		_node = &Test{config: tc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: test.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: test.FieldID,
			},
		}
	)
	if value, ok := tc.mutation.TestType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: test.FieldTestType,
		})
		_node.TestType = value
	}
	if nodes := tc.mutation.ModuleTestIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   test.ModuleTestTable,
			Columns: []string{test.ModuleTestColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: moduletest.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tc.mutation.SubmoduleTestIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   test.SubmoduleTestTable,
			Columns: []string{test.SubmoduleTestColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: submoduletest.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tc.mutation.TherTestIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   test.TherTestTable,
			Columns: []string{test.TherTestColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: theoreticaltest.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tc.mutation.PractTestIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   test.PractTestTable,
			Columns: []string{test.PractTestColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: practtest.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// TestCreateBulk is the builder for creating many Test entities in bulk.
type TestCreateBulk struct {
	config
	builders []*TestCreate
}

// Save creates the Test entities in the database.
func (tcb *TestCreateBulk) Save(ctx context.Context) ([]*Test, error) {
	specs := make([]*sqlgraph.CreateSpec, len(tcb.builders))
	nodes := make([]*Test, len(tcb.builders))
	mutators := make([]Mutator, len(tcb.builders))
	for i := range tcb.builders {
		func(i int, root context.Context) {
			builder := tcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TestMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tcb *TestCreateBulk) SaveX(ctx context.Context) []*Test {
	v, err := tcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tcb *TestCreateBulk) Exec(ctx context.Context) error {
	_, err := tcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tcb *TestCreateBulk) ExecX(ctx context.Context) {
	if err := tcb.Exec(ctx); err != nil {
		panic(err)
	}
}
