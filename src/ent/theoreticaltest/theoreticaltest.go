// Code generated by entc, DO NOT EDIT.

package theoreticaltest

const (
	// Label holds the string label denoting the theoreticaltest type in the database.
	Label = "theoretical_test"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldSubmoduletestID holds the string denoting the submoduletest_id field in the database.
	FieldSubmoduletestID = "submoduletest_id"
	// EdgeSubModuleTest holds the string denoting the submoduletest edge name in mutations.
	EdgeSubModuleTest = "SubModuleTest"
	// EdgeQuestion holds the string denoting the question edge name in mutations.
	EdgeQuestion = "Question"
	// Table holds the table name of the theoreticaltest in the database.
	Table = "TheoreticalTest"
	// SubModuleTestTable is the table that holds the SubModuleTest relation/edge.
	SubModuleTestTable = "TheoreticalTest"
	// SubModuleTestInverseTable is the table name for the SubModuleTest entity.
	// It exists in this package in order to avoid circular dependency with the "submoduletest" package.
	SubModuleTestInverseTable = "SubModuleTest"
	// SubModuleTestColumn is the table column denoting the SubModuleTest relation/edge.
	SubModuleTestColumn = "submoduletest_id"
	// QuestionTable is the table that holds the Question relation/edge.
	QuestionTable = "Question"
	// QuestionInverseTable is the table name for the Question entity.
	// It exists in this package in order to avoid circular dependency with the "question" package.
	QuestionInverseTable = "Question"
	// QuestionColumn is the table column denoting the Question relation/edge.
	QuestionColumn = "theorical_test_id"
)

// Columns holds all SQL columns for theoreticaltest fields.
var Columns = []string{
	FieldID,
	FieldSubmoduletestID,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}
