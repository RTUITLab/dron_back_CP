// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/0B1t322/CP-Rosseti-Back/ent/practtest"
	"github.com/0B1t322/CP-Rosseti-Back/ent/schema"
	"github.com/0B1t322/CP-Rosseti-Back/ent/task"
	"github.com/0B1t322/CP-Rosseti-Back/ent/test"
)

// PractTestCreate is the builder for creating a PractTest entity.
type PractTestCreate struct {
	config
	mutation *PractTestMutation
	hooks    []Hook
}

// SetTestID sets the "test_id" field.
func (ptc *PractTestCreate) SetTestID(i int) *PractTestCreate {
	ptc.mutation.SetTestID(i)
	return ptc
}

// SetConfig sets the "config" field.
func (ptc *PractTestCreate) SetConfig(so schema.JSONObject) *PractTestCreate {
	ptc.mutation.SetConfig(so)
	return ptc
}

// SetDuration sets the "duration" field.
func (ptc *PractTestCreate) SetDuration(i int) *PractTestCreate {
	ptc.mutation.SetDuration(i)
	return ptc
}

// SetNillableDuration sets the "duration" field if the given value is not nil.
func (ptc *PractTestCreate) SetNillableDuration(i *int) *PractTestCreate {
	if i != nil {
		ptc.SetDuration(*i)
	}
	return ptc
}

// SetTest sets the "Test" edge to the Test entity.
func (ptc *PractTestCreate) SetTest(t *Test) *PractTestCreate {
	return ptc.SetTestID(t.ID)
}

// SetTaskID sets the "Task" edge to the Task entity by ID.
func (ptc *PractTestCreate) SetTaskID(id int) *PractTestCreate {
	ptc.mutation.SetTaskID(id)
	return ptc
}

// SetNillableTaskID sets the "Task" edge to the Task entity by ID if the given value is not nil.
func (ptc *PractTestCreate) SetNillableTaskID(id *int) *PractTestCreate {
	if id != nil {
		ptc = ptc.SetTaskID(*id)
	}
	return ptc
}

// SetTask sets the "Task" edge to the Task entity.
func (ptc *PractTestCreate) SetTask(t *Task) *PractTestCreate {
	return ptc.SetTaskID(t.ID)
}

// Mutation returns the PractTestMutation object of the builder.
func (ptc *PractTestCreate) Mutation() *PractTestMutation {
	return ptc.mutation
}

// Save creates the PractTest in the database.
func (ptc *PractTestCreate) Save(ctx context.Context) (*PractTest, error) {
	var (
		err  error
		node *PractTest
	)
	if len(ptc.hooks) == 0 {
		if err = ptc.check(); err != nil {
			return nil, err
		}
		node, err = ptc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PractTestMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ptc.check(); err != nil {
				return nil, err
			}
			ptc.mutation = mutation
			if node, err = ptc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(ptc.hooks) - 1; i >= 0; i-- {
			if ptc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ptc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ptc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (ptc *PractTestCreate) SaveX(ctx context.Context) *PractTest {
	v, err := ptc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ptc *PractTestCreate) Exec(ctx context.Context) error {
	_, err := ptc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ptc *PractTestCreate) ExecX(ctx context.Context) {
	if err := ptc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ptc *PractTestCreate) check() error {
	if _, ok := ptc.mutation.TestID(); !ok {
		return &ValidationError{Name: "test_id", err: errors.New(`ent: missing required field "test_id"`)}
	}
	if _, ok := ptc.mutation.Config(); !ok {
		return &ValidationError{Name: "config", err: errors.New(`ent: missing required field "config"`)}
	}
	if _, ok := ptc.mutation.TestID(); !ok {
		return &ValidationError{Name: "Test", err: errors.New("ent: missing required edge \"Test\"")}
	}
	return nil
}

func (ptc *PractTestCreate) sqlSave(ctx context.Context) (*PractTest, error) {
	_node, _spec := ptc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ptc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (ptc *PractTestCreate) createSpec() (*PractTest, *sqlgraph.CreateSpec) {
	var (
		_node = &PractTest{config: ptc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: practtest.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: practtest.FieldID,
			},
		}
	)
	if value, ok := ptc.mutation.Config(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: practtest.FieldConfig,
		})
		_node.Config = value
	}
	if value, ok := ptc.mutation.Duration(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: practtest.FieldDuration,
		})
		_node.Duration = value
	}
	if nodes := ptc.mutation.TestIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   practtest.TestTable,
			Columns: []string{practtest.TestColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: test.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.TestID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ptc.mutation.TaskIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   practtest.TaskTable,
			Columns: []string{practtest.TaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: task.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// PractTestCreateBulk is the builder for creating many PractTest entities in bulk.
type PractTestCreateBulk struct {
	config
	builders []*PractTestCreate
}

// Save creates the PractTest entities in the database.
func (ptcb *PractTestCreateBulk) Save(ctx context.Context) ([]*PractTest, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ptcb.builders))
	nodes := make([]*PractTest, len(ptcb.builders))
	mutators := make([]Mutator, len(ptcb.builders))
	for i := range ptcb.builders {
		func(i int, root context.Context) {
			builder := ptcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PractTestMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ptcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ptcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ptcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ptcb *PractTestCreateBulk) SaveX(ctx context.Context) []*PractTest {
	v, err := ptcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ptcb *PractTestCreateBulk) Exec(ctx context.Context) error {
	_, err := ptcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ptcb *PractTestCreateBulk) ExecX(ctx context.Context) {
	if err := ptcb.Exec(ctx); err != nil {
		panic(err)
	}
}
