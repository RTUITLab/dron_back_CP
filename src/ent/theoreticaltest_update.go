// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/0B1t322/CP-Rosseti-Back/ent/predicate"
	"github.com/0B1t322/CP-Rosseti-Back/ent/question"
	"github.com/0B1t322/CP-Rosseti-Back/ent/submoduletest"
	"github.com/0B1t322/CP-Rosseti-Back/ent/theoreticaltest"
)

// TheoreticalTestUpdate is the builder for updating TheoreticalTest entities.
type TheoreticalTestUpdate struct {
	config
	hooks    []Hook
	mutation *TheoreticalTestMutation
}

// Where appends a list predicates to the TheoreticalTestUpdate builder.
func (ttu *TheoreticalTestUpdate) Where(ps ...predicate.TheoreticalTest) *TheoreticalTestUpdate {
	ttu.mutation.Where(ps...)
	return ttu
}

// SetSubmoduletestID sets the "submoduletest_id" field.
func (ttu *TheoreticalTestUpdate) SetSubmoduletestID(i int) *TheoreticalTestUpdate {
	ttu.mutation.SetSubmoduletestID(i)
	return ttu
}

// SetSubModuleTestID sets the "SubModuleTest" edge to the SubModuleTest entity by ID.
func (ttu *TheoreticalTestUpdate) SetSubModuleTestID(id int) *TheoreticalTestUpdate {
	ttu.mutation.SetSubModuleTestID(id)
	return ttu
}

// SetSubModuleTest sets the "SubModuleTest" edge to the SubModuleTest entity.
func (ttu *TheoreticalTestUpdate) SetSubModuleTest(s *SubModuleTest) *TheoreticalTestUpdate {
	return ttu.SetSubModuleTestID(s.ID)
}

// AddQuestionIDs adds the "Question" edge to the Question entity by IDs.
func (ttu *TheoreticalTestUpdate) AddQuestionIDs(ids ...int) *TheoreticalTestUpdate {
	ttu.mutation.AddQuestionIDs(ids...)
	return ttu
}

// AddQuestion adds the "Question" edges to the Question entity.
func (ttu *TheoreticalTestUpdate) AddQuestion(q ...*Question) *TheoreticalTestUpdate {
	ids := make([]int, len(q))
	for i := range q {
		ids[i] = q[i].ID
	}
	return ttu.AddQuestionIDs(ids...)
}

// Mutation returns the TheoreticalTestMutation object of the builder.
func (ttu *TheoreticalTestUpdate) Mutation() *TheoreticalTestMutation {
	return ttu.mutation
}

// ClearSubModuleTest clears the "SubModuleTest" edge to the SubModuleTest entity.
func (ttu *TheoreticalTestUpdate) ClearSubModuleTest() *TheoreticalTestUpdate {
	ttu.mutation.ClearSubModuleTest()
	return ttu
}

// ClearQuestion clears all "Question" edges to the Question entity.
func (ttu *TheoreticalTestUpdate) ClearQuestion() *TheoreticalTestUpdate {
	ttu.mutation.ClearQuestion()
	return ttu
}

// RemoveQuestionIDs removes the "Question" edge to Question entities by IDs.
func (ttu *TheoreticalTestUpdate) RemoveQuestionIDs(ids ...int) *TheoreticalTestUpdate {
	ttu.mutation.RemoveQuestionIDs(ids...)
	return ttu
}

// RemoveQuestion removes "Question" edges to Question entities.
func (ttu *TheoreticalTestUpdate) RemoveQuestion(q ...*Question) *TheoreticalTestUpdate {
	ids := make([]int, len(q))
	for i := range q {
		ids[i] = q[i].ID
	}
	return ttu.RemoveQuestionIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ttu *TheoreticalTestUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(ttu.hooks) == 0 {
		if err = ttu.check(); err != nil {
			return 0, err
		}
		affected, err = ttu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TheoreticalTestMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ttu.check(); err != nil {
				return 0, err
			}
			ttu.mutation = mutation
			affected, err = ttu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(ttu.hooks) - 1; i >= 0; i-- {
			if ttu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ttu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ttu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (ttu *TheoreticalTestUpdate) SaveX(ctx context.Context) int {
	affected, err := ttu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ttu *TheoreticalTestUpdate) Exec(ctx context.Context) error {
	_, err := ttu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ttu *TheoreticalTestUpdate) ExecX(ctx context.Context) {
	if err := ttu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ttu *TheoreticalTestUpdate) check() error {
	if _, ok := ttu.mutation.SubModuleTestID(); ttu.mutation.SubModuleTestCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"SubModuleTest\"")
	}
	return nil
}

func (ttu *TheoreticalTestUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   theoreticaltest.Table,
			Columns: theoreticaltest.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: theoreticaltest.FieldID,
			},
		},
	}
	if ps := ttu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if ttu.mutation.SubModuleTestCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   theoreticaltest.SubModuleTestTable,
			Columns: []string{theoreticaltest.SubModuleTestColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: submoduletest.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ttu.mutation.SubModuleTestIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   theoreticaltest.SubModuleTestTable,
			Columns: []string{theoreticaltest.SubModuleTestColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: submoduletest.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ttu.mutation.QuestionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   theoreticaltest.QuestionTable,
			Columns: []string{theoreticaltest.QuestionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: question.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ttu.mutation.RemovedQuestionIDs(); len(nodes) > 0 && !ttu.mutation.QuestionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   theoreticaltest.QuestionTable,
			Columns: []string{theoreticaltest.QuestionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: question.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ttu.mutation.QuestionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   theoreticaltest.QuestionTable,
			Columns: []string{theoreticaltest.QuestionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: question.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ttu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{theoreticaltest.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// TheoreticalTestUpdateOne is the builder for updating a single TheoreticalTest entity.
type TheoreticalTestUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TheoreticalTestMutation
}

// SetSubmoduletestID sets the "submoduletest_id" field.
func (ttuo *TheoreticalTestUpdateOne) SetSubmoduletestID(i int) *TheoreticalTestUpdateOne {
	ttuo.mutation.SetSubmoduletestID(i)
	return ttuo
}

// SetSubModuleTestID sets the "SubModuleTest" edge to the SubModuleTest entity by ID.
func (ttuo *TheoreticalTestUpdateOne) SetSubModuleTestID(id int) *TheoreticalTestUpdateOne {
	ttuo.mutation.SetSubModuleTestID(id)
	return ttuo
}

// SetSubModuleTest sets the "SubModuleTest" edge to the SubModuleTest entity.
func (ttuo *TheoreticalTestUpdateOne) SetSubModuleTest(s *SubModuleTest) *TheoreticalTestUpdateOne {
	return ttuo.SetSubModuleTestID(s.ID)
}

// AddQuestionIDs adds the "Question" edge to the Question entity by IDs.
func (ttuo *TheoreticalTestUpdateOne) AddQuestionIDs(ids ...int) *TheoreticalTestUpdateOne {
	ttuo.mutation.AddQuestionIDs(ids...)
	return ttuo
}

// AddQuestion adds the "Question" edges to the Question entity.
func (ttuo *TheoreticalTestUpdateOne) AddQuestion(q ...*Question) *TheoreticalTestUpdateOne {
	ids := make([]int, len(q))
	for i := range q {
		ids[i] = q[i].ID
	}
	return ttuo.AddQuestionIDs(ids...)
}

// Mutation returns the TheoreticalTestMutation object of the builder.
func (ttuo *TheoreticalTestUpdateOne) Mutation() *TheoreticalTestMutation {
	return ttuo.mutation
}

// ClearSubModuleTest clears the "SubModuleTest" edge to the SubModuleTest entity.
func (ttuo *TheoreticalTestUpdateOne) ClearSubModuleTest() *TheoreticalTestUpdateOne {
	ttuo.mutation.ClearSubModuleTest()
	return ttuo
}

// ClearQuestion clears all "Question" edges to the Question entity.
func (ttuo *TheoreticalTestUpdateOne) ClearQuestion() *TheoreticalTestUpdateOne {
	ttuo.mutation.ClearQuestion()
	return ttuo
}

// RemoveQuestionIDs removes the "Question" edge to Question entities by IDs.
func (ttuo *TheoreticalTestUpdateOne) RemoveQuestionIDs(ids ...int) *TheoreticalTestUpdateOne {
	ttuo.mutation.RemoveQuestionIDs(ids...)
	return ttuo
}

// RemoveQuestion removes "Question" edges to Question entities.
func (ttuo *TheoreticalTestUpdateOne) RemoveQuestion(q ...*Question) *TheoreticalTestUpdateOne {
	ids := make([]int, len(q))
	for i := range q {
		ids[i] = q[i].ID
	}
	return ttuo.RemoveQuestionIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ttuo *TheoreticalTestUpdateOne) Select(field string, fields ...string) *TheoreticalTestUpdateOne {
	ttuo.fields = append([]string{field}, fields...)
	return ttuo
}

// Save executes the query and returns the updated TheoreticalTest entity.
func (ttuo *TheoreticalTestUpdateOne) Save(ctx context.Context) (*TheoreticalTest, error) {
	var (
		err  error
		node *TheoreticalTest
	)
	if len(ttuo.hooks) == 0 {
		if err = ttuo.check(); err != nil {
			return nil, err
		}
		node, err = ttuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TheoreticalTestMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ttuo.check(); err != nil {
				return nil, err
			}
			ttuo.mutation = mutation
			node, err = ttuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ttuo.hooks) - 1; i >= 0; i-- {
			if ttuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ttuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ttuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (ttuo *TheoreticalTestUpdateOne) SaveX(ctx context.Context) *TheoreticalTest {
	node, err := ttuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ttuo *TheoreticalTestUpdateOne) Exec(ctx context.Context) error {
	_, err := ttuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ttuo *TheoreticalTestUpdateOne) ExecX(ctx context.Context) {
	if err := ttuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ttuo *TheoreticalTestUpdateOne) check() error {
	if _, ok := ttuo.mutation.SubModuleTestID(); ttuo.mutation.SubModuleTestCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"SubModuleTest\"")
	}
	return nil
}

func (ttuo *TheoreticalTestUpdateOne) sqlSave(ctx context.Context) (_node *TheoreticalTest, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   theoreticaltest.Table,
			Columns: theoreticaltest.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: theoreticaltest.FieldID,
			},
		},
	}
	id, ok := ttuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing TheoreticalTest.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := ttuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, theoreticaltest.FieldID)
		for _, f := range fields {
			if !theoreticaltest.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != theoreticaltest.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ttuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if ttuo.mutation.SubModuleTestCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   theoreticaltest.SubModuleTestTable,
			Columns: []string{theoreticaltest.SubModuleTestColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: submoduletest.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ttuo.mutation.SubModuleTestIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   theoreticaltest.SubModuleTestTable,
			Columns: []string{theoreticaltest.SubModuleTestColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: submoduletest.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ttuo.mutation.QuestionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   theoreticaltest.QuestionTable,
			Columns: []string{theoreticaltest.QuestionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: question.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ttuo.mutation.RemovedQuestionIDs(); len(nodes) > 0 && !ttuo.mutation.QuestionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   theoreticaltest.QuestionTable,
			Columns: []string{theoreticaltest.QuestionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: question.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ttuo.mutation.QuestionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   theoreticaltest.QuestionTable,
			Columns: []string{theoreticaltest.QuestionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: question.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &TheoreticalTest{config: ttuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ttuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{theoreticaltest.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
