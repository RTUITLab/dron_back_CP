// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/0B1t322/CP-Rosseti-Back/ent/module"
	"github.com/0B1t322/CP-Rosseti-Back/ent/moduledependcies"
	"github.com/0B1t322/CP-Rosseti-Back/ent/predicate"
	"github.com/0B1t322/CP-Rosseti-Back/ent/submodule"
)

// ModuleUpdate is the builder for updating Module entities.
type ModuleUpdate struct {
	config
	hooks    []Hook
	mutation *ModuleMutation
}

// Where appends a list predicates to the ModuleUpdate builder.
func (mu *ModuleUpdate) Where(ps ...predicate.Module) *ModuleUpdate {
	mu.mutation.Where(ps...)
	return mu
}

// SetName sets the "name" field.
func (mu *ModuleUpdate) SetName(s string) *ModuleUpdate {
	mu.mutation.SetName(s)
	return mu
}

// AddModuleDependcyIDs adds the "ModuleDependcies" edge to the ModuleDependcies entity by IDs.
func (mu *ModuleUpdate) AddModuleDependcyIDs(ids ...int) *ModuleUpdate {
	mu.mutation.AddModuleDependcyIDs(ids...)
	return mu
}

// AddModuleDependcies adds the "ModuleDependcies" edges to the ModuleDependcies entity.
func (mu *ModuleUpdate) AddModuleDependcies(m ...*ModuleDependcies) *ModuleUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return mu.AddModuleDependcyIDs(ids...)
}

// AddModuleDependOnIDs adds the "ModuleDependOn" edge to the ModuleDependcies entity by IDs.
func (mu *ModuleUpdate) AddModuleDependOnIDs(ids ...int) *ModuleUpdate {
	mu.mutation.AddModuleDependOnIDs(ids...)
	return mu
}

// AddModuleDependOn adds the "ModuleDependOn" edges to the ModuleDependcies entity.
func (mu *ModuleUpdate) AddModuleDependOn(m ...*ModuleDependcies) *ModuleUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return mu.AddModuleDependOnIDs(ids...)
}

// AddSubModuleIDs adds the "SubModules" edge to the SubModule entity by IDs.
func (mu *ModuleUpdate) AddSubModuleIDs(ids ...int) *ModuleUpdate {
	mu.mutation.AddSubModuleIDs(ids...)
	return mu
}

// AddSubModules adds the "SubModules" edges to the SubModule entity.
func (mu *ModuleUpdate) AddSubModules(s ...*SubModule) *ModuleUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return mu.AddSubModuleIDs(ids...)
}

// Mutation returns the ModuleMutation object of the builder.
func (mu *ModuleUpdate) Mutation() *ModuleMutation {
	return mu.mutation
}

// ClearModuleDependcies clears all "ModuleDependcies" edges to the ModuleDependcies entity.
func (mu *ModuleUpdate) ClearModuleDependcies() *ModuleUpdate {
	mu.mutation.ClearModuleDependcies()
	return mu
}

// RemoveModuleDependcyIDs removes the "ModuleDependcies" edge to ModuleDependcies entities by IDs.
func (mu *ModuleUpdate) RemoveModuleDependcyIDs(ids ...int) *ModuleUpdate {
	mu.mutation.RemoveModuleDependcyIDs(ids...)
	return mu
}

// RemoveModuleDependcies removes "ModuleDependcies" edges to ModuleDependcies entities.
func (mu *ModuleUpdate) RemoveModuleDependcies(m ...*ModuleDependcies) *ModuleUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return mu.RemoveModuleDependcyIDs(ids...)
}

// ClearModuleDependOn clears all "ModuleDependOn" edges to the ModuleDependcies entity.
func (mu *ModuleUpdate) ClearModuleDependOn() *ModuleUpdate {
	mu.mutation.ClearModuleDependOn()
	return mu
}

// RemoveModuleDependOnIDs removes the "ModuleDependOn" edge to ModuleDependcies entities by IDs.
func (mu *ModuleUpdate) RemoveModuleDependOnIDs(ids ...int) *ModuleUpdate {
	mu.mutation.RemoveModuleDependOnIDs(ids...)
	return mu
}

// RemoveModuleDependOn removes "ModuleDependOn" edges to ModuleDependcies entities.
func (mu *ModuleUpdate) RemoveModuleDependOn(m ...*ModuleDependcies) *ModuleUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return mu.RemoveModuleDependOnIDs(ids...)
}

// ClearSubModules clears all "SubModules" edges to the SubModule entity.
func (mu *ModuleUpdate) ClearSubModules() *ModuleUpdate {
	mu.mutation.ClearSubModules()
	return mu
}

// RemoveSubModuleIDs removes the "SubModules" edge to SubModule entities by IDs.
func (mu *ModuleUpdate) RemoveSubModuleIDs(ids ...int) *ModuleUpdate {
	mu.mutation.RemoveSubModuleIDs(ids...)
	return mu
}

// RemoveSubModules removes "SubModules" edges to SubModule entities.
func (mu *ModuleUpdate) RemoveSubModules(s ...*SubModule) *ModuleUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return mu.RemoveSubModuleIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mu *ModuleUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(mu.hooks) == 0 {
		affected, err = mu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ModuleMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			mu.mutation = mutation
			affected, err = mu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(mu.hooks) - 1; i >= 0; i-- {
			if mu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = mu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, mu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (mu *ModuleUpdate) SaveX(ctx context.Context) int {
	affected, err := mu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mu *ModuleUpdate) Exec(ctx context.Context) error {
	_, err := mu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mu *ModuleUpdate) ExecX(ctx context.Context) {
	if err := mu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (mu *ModuleUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   module.Table,
			Columns: module.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: module.FieldID,
			},
		},
	}
	if ps := mu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: module.FieldName,
		})
	}
	if mu.mutation.ModuleDependciesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   module.ModuleDependciesTable,
			Columns: []string{module.ModuleDependciesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: moduledependcies.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.RemovedModuleDependciesIDs(); len(nodes) > 0 && !mu.mutation.ModuleDependciesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   module.ModuleDependciesTable,
			Columns: []string{module.ModuleDependciesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: moduledependcies.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.ModuleDependciesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   module.ModuleDependciesTable,
			Columns: []string{module.ModuleDependciesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: moduledependcies.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mu.mutation.ModuleDependOnCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   module.ModuleDependOnTable,
			Columns: []string{module.ModuleDependOnColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: moduledependcies.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.RemovedModuleDependOnIDs(); len(nodes) > 0 && !mu.mutation.ModuleDependOnCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   module.ModuleDependOnTable,
			Columns: []string{module.ModuleDependOnColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: moduledependcies.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.ModuleDependOnIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   module.ModuleDependOnTable,
			Columns: []string{module.ModuleDependOnColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: moduledependcies.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mu.mutation.SubModulesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   module.SubModulesTable,
			Columns: []string{module.SubModulesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: submodule.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.RemovedSubModulesIDs(); len(nodes) > 0 && !mu.mutation.SubModulesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   module.SubModulesTable,
			Columns: []string{module.SubModulesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: submodule.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.SubModulesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   module.SubModulesTable,
			Columns: []string{module.SubModulesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: submodule.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, mu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{module.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// ModuleUpdateOne is the builder for updating a single Module entity.
type ModuleUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ModuleMutation
}

// SetName sets the "name" field.
func (muo *ModuleUpdateOne) SetName(s string) *ModuleUpdateOne {
	muo.mutation.SetName(s)
	return muo
}

// AddModuleDependcyIDs adds the "ModuleDependcies" edge to the ModuleDependcies entity by IDs.
func (muo *ModuleUpdateOne) AddModuleDependcyIDs(ids ...int) *ModuleUpdateOne {
	muo.mutation.AddModuleDependcyIDs(ids...)
	return muo
}

// AddModuleDependcies adds the "ModuleDependcies" edges to the ModuleDependcies entity.
func (muo *ModuleUpdateOne) AddModuleDependcies(m ...*ModuleDependcies) *ModuleUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return muo.AddModuleDependcyIDs(ids...)
}

// AddModuleDependOnIDs adds the "ModuleDependOn" edge to the ModuleDependcies entity by IDs.
func (muo *ModuleUpdateOne) AddModuleDependOnIDs(ids ...int) *ModuleUpdateOne {
	muo.mutation.AddModuleDependOnIDs(ids...)
	return muo
}

// AddModuleDependOn adds the "ModuleDependOn" edges to the ModuleDependcies entity.
func (muo *ModuleUpdateOne) AddModuleDependOn(m ...*ModuleDependcies) *ModuleUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return muo.AddModuleDependOnIDs(ids...)
}

// AddSubModuleIDs adds the "SubModules" edge to the SubModule entity by IDs.
func (muo *ModuleUpdateOne) AddSubModuleIDs(ids ...int) *ModuleUpdateOne {
	muo.mutation.AddSubModuleIDs(ids...)
	return muo
}

// AddSubModules adds the "SubModules" edges to the SubModule entity.
func (muo *ModuleUpdateOne) AddSubModules(s ...*SubModule) *ModuleUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return muo.AddSubModuleIDs(ids...)
}

// Mutation returns the ModuleMutation object of the builder.
func (muo *ModuleUpdateOne) Mutation() *ModuleMutation {
	return muo.mutation
}

// ClearModuleDependcies clears all "ModuleDependcies" edges to the ModuleDependcies entity.
func (muo *ModuleUpdateOne) ClearModuleDependcies() *ModuleUpdateOne {
	muo.mutation.ClearModuleDependcies()
	return muo
}

// RemoveModuleDependcyIDs removes the "ModuleDependcies" edge to ModuleDependcies entities by IDs.
func (muo *ModuleUpdateOne) RemoveModuleDependcyIDs(ids ...int) *ModuleUpdateOne {
	muo.mutation.RemoveModuleDependcyIDs(ids...)
	return muo
}

// RemoveModuleDependcies removes "ModuleDependcies" edges to ModuleDependcies entities.
func (muo *ModuleUpdateOne) RemoveModuleDependcies(m ...*ModuleDependcies) *ModuleUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return muo.RemoveModuleDependcyIDs(ids...)
}

// ClearModuleDependOn clears all "ModuleDependOn" edges to the ModuleDependcies entity.
func (muo *ModuleUpdateOne) ClearModuleDependOn() *ModuleUpdateOne {
	muo.mutation.ClearModuleDependOn()
	return muo
}

// RemoveModuleDependOnIDs removes the "ModuleDependOn" edge to ModuleDependcies entities by IDs.
func (muo *ModuleUpdateOne) RemoveModuleDependOnIDs(ids ...int) *ModuleUpdateOne {
	muo.mutation.RemoveModuleDependOnIDs(ids...)
	return muo
}

// RemoveModuleDependOn removes "ModuleDependOn" edges to ModuleDependcies entities.
func (muo *ModuleUpdateOne) RemoveModuleDependOn(m ...*ModuleDependcies) *ModuleUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return muo.RemoveModuleDependOnIDs(ids...)
}

// ClearSubModules clears all "SubModules" edges to the SubModule entity.
func (muo *ModuleUpdateOne) ClearSubModules() *ModuleUpdateOne {
	muo.mutation.ClearSubModules()
	return muo
}

// RemoveSubModuleIDs removes the "SubModules" edge to SubModule entities by IDs.
func (muo *ModuleUpdateOne) RemoveSubModuleIDs(ids ...int) *ModuleUpdateOne {
	muo.mutation.RemoveSubModuleIDs(ids...)
	return muo
}

// RemoveSubModules removes "SubModules" edges to SubModule entities.
func (muo *ModuleUpdateOne) RemoveSubModules(s ...*SubModule) *ModuleUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return muo.RemoveSubModuleIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (muo *ModuleUpdateOne) Select(field string, fields ...string) *ModuleUpdateOne {
	muo.fields = append([]string{field}, fields...)
	return muo
}

// Save executes the query and returns the updated Module entity.
func (muo *ModuleUpdateOne) Save(ctx context.Context) (*Module, error) {
	var (
		err  error
		node *Module
	)
	if len(muo.hooks) == 0 {
		node, err = muo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ModuleMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			muo.mutation = mutation
			node, err = muo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(muo.hooks) - 1; i >= 0; i-- {
			if muo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = muo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, muo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (muo *ModuleUpdateOne) SaveX(ctx context.Context) *Module {
	node, err := muo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (muo *ModuleUpdateOne) Exec(ctx context.Context) error {
	_, err := muo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (muo *ModuleUpdateOne) ExecX(ctx context.Context) {
	if err := muo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (muo *ModuleUpdateOne) sqlSave(ctx context.Context) (_node *Module, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   module.Table,
			Columns: module.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: module.FieldID,
			},
		},
	}
	id, ok := muo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Module.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := muo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, module.FieldID)
		for _, f := range fields {
			if !module.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != module.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := muo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := muo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: module.FieldName,
		})
	}
	if muo.mutation.ModuleDependciesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   module.ModuleDependciesTable,
			Columns: []string{module.ModuleDependciesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: moduledependcies.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.RemovedModuleDependciesIDs(); len(nodes) > 0 && !muo.mutation.ModuleDependciesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   module.ModuleDependciesTable,
			Columns: []string{module.ModuleDependciesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: moduledependcies.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.ModuleDependciesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   module.ModuleDependciesTable,
			Columns: []string{module.ModuleDependciesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: moduledependcies.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if muo.mutation.ModuleDependOnCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   module.ModuleDependOnTable,
			Columns: []string{module.ModuleDependOnColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: moduledependcies.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.RemovedModuleDependOnIDs(); len(nodes) > 0 && !muo.mutation.ModuleDependOnCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   module.ModuleDependOnTable,
			Columns: []string{module.ModuleDependOnColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: moduledependcies.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.ModuleDependOnIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   module.ModuleDependOnTable,
			Columns: []string{module.ModuleDependOnColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: moduledependcies.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if muo.mutation.SubModulesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   module.SubModulesTable,
			Columns: []string{module.SubModulesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: submodule.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.RemovedSubModulesIDs(); len(nodes) > 0 && !muo.mutation.SubModulesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   module.SubModulesTable,
			Columns: []string{module.SubModulesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: submodule.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.SubModulesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   module.SubModulesTable,
			Columns: []string{module.SubModulesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: submodule.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Module{config: muo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, muo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{module.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
