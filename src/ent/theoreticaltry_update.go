// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/0B1t322/CP-Rosseti-Back/ent/predicate"
	"github.com/0B1t322/CP-Rosseti-Back/ent/theoreticaltest"
	"github.com/0B1t322/CP-Rosseti-Back/ent/theoreticaltry"
	"github.com/0B1t322/CP-Rosseti-Back/ent/tryanswer"
	"github.com/0B1t322/CP-Rosseti-Back/ent/user"
)

// TheoreticalTryUpdate is the builder for updating TheoreticalTry entities.
type TheoreticalTryUpdate struct {
	config
	hooks    []Hook
	mutation *TheoreticalTryMutation
}

// Where appends a list predicates to the TheoreticalTryUpdate builder.
func (ttu *TheoreticalTryUpdate) Where(ps ...predicate.TheoreticalTry) *TheoreticalTryUpdate {
	ttu.mutation.Where(ps...)
	return ttu
}

// SetStart sets the "start" field.
func (ttu *TheoreticalTryUpdate) SetStart(t time.Time) *TheoreticalTryUpdate {
	ttu.mutation.SetStart(t)
	return ttu
}

// SetEnd sets the "end" field.
func (ttu *TheoreticalTryUpdate) SetEnd(t time.Time) *TheoreticalTryUpdate {
	ttu.mutation.SetEnd(t)
	return ttu
}

// SetNillableEnd sets the "end" field if the given value is not nil.
func (ttu *TheoreticalTryUpdate) SetNillableEnd(t *time.Time) *TheoreticalTryUpdate {
	if t != nil {
		ttu.SetEnd(*t)
	}
	return ttu
}

// ClearEnd clears the value of the "end" field.
func (ttu *TheoreticalTryUpdate) ClearEnd() *TheoreticalTryUpdate {
	ttu.mutation.ClearEnd()
	return ttu
}

// SetUserID sets the "user_id" field.
func (ttu *TheoreticalTryUpdate) SetUserID(i int) *TheoreticalTryUpdate {
	ttu.mutation.SetUserID(i)
	return ttu
}

// SetTheoreticalTestID sets the "theoretical_test_id" field.
func (ttu *TheoreticalTryUpdate) SetTheoreticalTestID(i int) *TheoreticalTryUpdate {
	ttu.mutation.SetTheoreticalTestID(i)
	return ttu
}

// SetTheoreticalTest sets the "TheoreticalTest" edge to the TheoreticalTest entity.
func (ttu *TheoreticalTryUpdate) SetTheoreticalTest(t *TheoreticalTest) *TheoreticalTryUpdate {
	return ttu.SetTheoreticalTestID(t.ID)
}

// SetUser sets the "User" edge to the User entity.
func (ttu *TheoreticalTryUpdate) SetUser(u *User) *TheoreticalTryUpdate {
	return ttu.SetUserID(u.ID)
}

// AddTryAnswerIDs adds the "TryAnswer" edge to the TryAnswer entity by IDs.
func (ttu *TheoreticalTryUpdate) AddTryAnswerIDs(ids ...int) *TheoreticalTryUpdate {
	ttu.mutation.AddTryAnswerIDs(ids...)
	return ttu
}

// AddTryAnswer adds the "TryAnswer" edges to the TryAnswer entity.
func (ttu *TheoreticalTryUpdate) AddTryAnswer(t ...*TryAnswer) *TheoreticalTryUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return ttu.AddTryAnswerIDs(ids...)
}

// Mutation returns the TheoreticalTryMutation object of the builder.
func (ttu *TheoreticalTryUpdate) Mutation() *TheoreticalTryMutation {
	return ttu.mutation
}

// ClearTheoreticalTest clears the "TheoreticalTest" edge to the TheoreticalTest entity.
func (ttu *TheoreticalTryUpdate) ClearTheoreticalTest() *TheoreticalTryUpdate {
	ttu.mutation.ClearTheoreticalTest()
	return ttu
}

// ClearUser clears the "User" edge to the User entity.
func (ttu *TheoreticalTryUpdate) ClearUser() *TheoreticalTryUpdate {
	ttu.mutation.ClearUser()
	return ttu
}

// ClearTryAnswer clears all "TryAnswer" edges to the TryAnswer entity.
func (ttu *TheoreticalTryUpdate) ClearTryAnswer() *TheoreticalTryUpdate {
	ttu.mutation.ClearTryAnswer()
	return ttu
}

// RemoveTryAnswerIDs removes the "TryAnswer" edge to TryAnswer entities by IDs.
func (ttu *TheoreticalTryUpdate) RemoveTryAnswerIDs(ids ...int) *TheoreticalTryUpdate {
	ttu.mutation.RemoveTryAnswerIDs(ids...)
	return ttu
}

// RemoveTryAnswer removes "TryAnswer" edges to TryAnswer entities.
func (ttu *TheoreticalTryUpdate) RemoveTryAnswer(t ...*TryAnswer) *TheoreticalTryUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return ttu.RemoveTryAnswerIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ttu *TheoreticalTryUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(ttu.hooks) == 0 {
		if err = ttu.check(); err != nil {
			return 0, err
		}
		affected, err = ttu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TheoreticalTryMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ttu.check(); err != nil {
				return 0, err
			}
			ttu.mutation = mutation
			affected, err = ttu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(ttu.hooks) - 1; i >= 0; i-- {
			if ttu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ttu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ttu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (ttu *TheoreticalTryUpdate) SaveX(ctx context.Context) int {
	affected, err := ttu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ttu *TheoreticalTryUpdate) Exec(ctx context.Context) error {
	_, err := ttu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ttu *TheoreticalTryUpdate) ExecX(ctx context.Context) {
	if err := ttu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ttu *TheoreticalTryUpdate) check() error {
	if _, ok := ttu.mutation.TheoreticalTestID(); ttu.mutation.TheoreticalTestCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"TheoreticalTest\"")
	}
	if _, ok := ttu.mutation.UserID(); ttu.mutation.UserCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"User\"")
	}
	return nil
}

func (ttu *TheoreticalTryUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   theoreticaltry.Table,
			Columns: theoreticaltry.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: theoreticaltry.FieldID,
			},
		},
	}
	if ps := ttu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ttu.mutation.Start(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: theoreticaltry.FieldStart,
		})
	}
	if value, ok := ttu.mutation.End(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: theoreticaltry.FieldEnd,
		})
	}
	if ttu.mutation.EndCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: theoreticaltry.FieldEnd,
		})
	}
	if ttu.mutation.TheoreticalTestCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   theoreticaltry.TheoreticalTestTable,
			Columns: []string{theoreticaltry.TheoreticalTestColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: theoreticaltest.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ttu.mutation.TheoreticalTestIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   theoreticaltry.TheoreticalTestTable,
			Columns: []string{theoreticaltry.TheoreticalTestColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: theoreticaltest.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ttu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   theoreticaltry.UserTable,
			Columns: []string{theoreticaltry.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ttu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   theoreticaltry.UserTable,
			Columns: []string{theoreticaltry.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ttu.mutation.TryAnswerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   theoreticaltry.TryAnswerTable,
			Columns: []string{theoreticaltry.TryAnswerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tryanswer.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ttu.mutation.RemovedTryAnswerIDs(); len(nodes) > 0 && !ttu.mutation.TryAnswerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   theoreticaltry.TryAnswerTable,
			Columns: []string{theoreticaltry.TryAnswerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tryanswer.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ttu.mutation.TryAnswerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   theoreticaltry.TryAnswerTable,
			Columns: []string{theoreticaltry.TryAnswerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tryanswer.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ttu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{theoreticaltry.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// TheoreticalTryUpdateOne is the builder for updating a single TheoreticalTry entity.
type TheoreticalTryUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TheoreticalTryMutation
}

// SetStart sets the "start" field.
func (ttuo *TheoreticalTryUpdateOne) SetStart(t time.Time) *TheoreticalTryUpdateOne {
	ttuo.mutation.SetStart(t)
	return ttuo
}

// SetEnd sets the "end" field.
func (ttuo *TheoreticalTryUpdateOne) SetEnd(t time.Time) *TheoreticalTryUpdateOne {
	ttuo.mutation.SetEnd(t)
	return ttuo
}

// SetNillableEnd sets the "end" field if the given value is not nil.
func (ttuo *TheoreticalTryUpdateOne) SetNillableEnd(t *time.Time) *TheoreticalTryUpdateOne {
	if t != nil {
		ttuo.SetEnd(*t)
	}
	return ttuo
}

// ClearEnd clears the value of the "end" field.
func (ttuo *TheoreticalTryUpdateOne) ClearEnd() *TheoreticalTryUpdateOne {
	ttuo.mutation.ClearEnd()
	return ttuo
}

// SetUserID sets the "user_id" field.
func (ttuo *TheoreticalTryUpdateOne) SetUserID(i int) *TheoreticalTryUpdateOne {
	ttuo.mutation.SetUserID(i)
	return ttuo
}

// SetTheoreticalTestID sets the "theoretical_test_id" field.
func (ttuo *TheoreticalTryUpdateOne) SetTheoreticalTestID(i int) *TheoreticalTryUpdateOne {
	ttuo.mutation.SetTheoreticalTestID(i)
	return ttuo
}

// SetTheoreticalTest sets the "TheoreticalTest" edge to the TheoreticalTest entity.
func (ttuo *TheoreticalTryUpdateOne) SetTheoreticalTest(t *TheoreticalTest) *TheoreticalTryUpdateOne {
	return ttuo.SetTheoreticalTestID(t.ID)
}

// SetUser sets the "User" edge to the User entity.
func (ttuo *TheoreticalTryUpdateOne) SetUser(u *User) *TheoreticalTryUpdateOne {
	return ttuo.SetUserID(u.ID)
}

// AddTryAnswerIDs adds the "TryAnswer" edge to the TryAnswer entity by IDs.
func (ttuo *TheoreticalTryUpdateOne) AddTryAnswerIDs(ids ...int) *TheoreticalTryUpdateOne {
	ttuo.mutation.AddTryAnswerIDs(ids...)
	return ttuo
}

// AddTryAnswer adds the "TryAnswer" edges to the TryAnswer entity.
func (ttuo *TheoreticalTryUpdateOne) AddTryAnswer(t ...*TryAnswer) *TheoreticalTryUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return ttuo.AddTryAnswerIDs(ids...)
}

// Mutation returns the TheoreticalTryMutation object of the builder.
func (ttuo *TheoreticalTryUpdateOne) Mutation() *TheoreticalTryMutation {
	return ttuo.mutation
}

// ClearTheoreticalTest clears the "TheoreticalTest" edge to the TheoreticalTest entity.
func (ttuo *TheoreticalTryUpdateOne) ClearTheoreticalTest() *TheoreticalTryUpdateOne {
	ttuo.mutation.ClearTheoreticalTest()
	return ttuo
}

// ClearUser clears the "User" edge to the User entity.
func (ttuo *TheoreticalTryUpdateOne) ClearUser() *TheoreticalTryUpdateOne {
	ttuo.mutation.ClearUser()
	return ttuo
}

// ClearTryAnswer clears all "TryAnswer" edges to the TryAnswer entity.
func (ttuo *TheoreticalTryUpdateOne) ClearTryAnswer() *TheoreticalTryUpdateOne {
	ttuo.mutation.ClearTryAnswer()
	return ttuo
}

// RemoveTryAnswerIDs removes the "TryAnswer" edge to TryAnswer entities by IDs.
func (ttuo *TheoreticalTryUpdateOne) RemoveTryAnswerIDs(ids ...int) *TheoreticalTryUpdateOne {
	ttuo.mutation.RemoveTryAnswerIDs(ids...)
	return ttuo
}

// RemoveTryAnswer removes "TryAnswer" edges to TryAnswer entities.
func (ttuo *TheoreticalTryUpdateOne) RemoveTryAnswer(t ...*TryAnswer) *TheoreticalTryUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return ttuo.RemoveTryAnswerIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ttuo *TheoreticalTryUpdateOne) Select(field string, fields ...string) *TheoreticalTryUpdateOne {
	ttuo.fields = append([]string{field}, fields...)
	return ttuo
}

// Save executes the query and returns the updated TheoreticalTry entity.
func (ttuo *TheoreticalTryUpdateOne) Save(ctx context.Context) (*TheoreticalTry, error) {
	var (
		err  error
		node *TheoreticalTry
	)
	if len(ttuo.hooks) == 0 {
		if err = ttuo.check(); err != nil {
			return nil, err
		}
		node, err = ttuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TheoreticalTryMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ttuo.check(); err != nil {
				return nil, err
			}
			ttuo.mutation = mutation
			node, err = ttuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ttuo.hooks) - 1; i >= 0; i-- {
			if ttuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ttuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ttuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (ttuo *TheoreticalTryUpdateOne) SaveX(ctx context.Context) *TheoreticalTry {
	node, err := ttuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ttuo *TheoreticalTryUpdateOne) Exec(ctx context.Context) error {
	_, err := ttuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ttuo *TheoreticalTryUpdateOne) ExecX(ctx context.Context) {
	if err := ttuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ttuo *TheoreticalTryUpdateOne) check() error {
	if _, ok := ttuo.mutation.TheoreticalTestID(); ttuo.mutation.TheoreticalTestCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"TheoreticalTest\"")
	}
	if _, ok := ttuo.mutation.UserID(); ttuo.mutation.UserCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"User\"")
	}
	return nil
}

func (ttuo *TheoreticalTryUpdateOne) sqlSave(ctx context.Context) (_node *TheoreticalTry, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   theoreticaltry.Table,
			Columns: theoreticaltry.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: theoreticaltry.FieldID,
			},
		},
	}
	id, ok := ttuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing TheoreticalTry.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := ttuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, theoreticaltry.FieldID)
		for _, f := range fields {
			if !theoreticaltry.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != theoreticaltry.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ttuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ttuo.mutation.Start(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: theoreticaltry.FieldStart,
		})
	}
	if value, ok := ttuo.mutation.End(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: theoreticaltry.FieldEnd,
		})
	}
	if ttuo.mutation.EndCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: theoreticaltry.FieldEnd,
		})
	}
	if ttuo.mutation.TheoreticalTestCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   theoreticaltry.TheoreticalTestTable,
			Columns: []string{theoreticaltry.TheoreticalTestColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: theoreticaltest.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ttuo.mutation.TheoreticalTestIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   theoreticaltry.TheoreticalTestTable,
			Columns: []string{theoreticaltry.TheoreticalTestColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: theoreticaltest.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ttuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   theoreticaltry.UserTable,
			Columns: []string{theoreticaltry.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ttuo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   theoreticaltry.UserTable,
			Columns: []string{theoreticaltry.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ttuo.mutation.TryAnswerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   theoreticaltry.TryAnswerTable,
			Columns: []string{theoreticaltry.TryAnswerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tryanswer.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ttuo.mutation.RemovedTryAnswerIDs(); len(nodes) > 0 && !ttuo.mutation.TryAnswerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   theoreticaltry.TryAnswerTable,
			Columns: []string{theoreticaltry.TryAnswerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tryanswer.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ttuo.mutation.TryAnswerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   theoreticaltry.TryAnswerTable,
			Columns: []string{theoreticaltry.TryAnswerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tryanswer.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &TheoreticalTry{config: ttuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ttuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{theoreticaltry.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
