// Code generated by entc, DO NOT EDIT.

package moduletest

const (
	// Label holds the string label denoting the moduletest type in the database.
	Label = "module_test"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldModuleID holds the string denoting the module_id field in the database.
	FieldModuleID = "module_id"
	// FieldTestID holds the string denoting the test_id field in the database.
	FieldTestID = "test_id"
	// EdgeModule holds the string denoting the module edge name in mutations.
	EdgeModule = "Module"
	// EdgeTest holds the string denoting the test edge name in mutations.
	EdgeTest = "Test"
	// Table holds the table name of the moduletest in the database.
	Table = "ModuleTest"
	// ModuleTable is the table that holds the Module relation/edge.
	ModuleTable = "ModuleTest"
	// ModuleInverseTable is the table name for the Module entity.
	// It exists in this package in order to avoid circular dependency with the "module" package.
	ModuleInverseTable = "Module"
	// ModuleColumn is the table column denoting the Module relation/edge.
	ModuleColumn = "module_id"
	// TestTable is the table that holds the Test relation/edge.
	TestTable = "ModuleTest"
	// TestInverseTable is the table name for the Test entity.
	// It exists in this package in order to avoid circular dependency with the "test" package.
	TestInverseTable = "Test"
	// TestColumn is the table column denoting the Test relation/edge.
	TestColumn = "test_id"
)

// Columns holds all SQL columns for moduletest fields.
var Columns = []string{
	FieldID,
	FieldModuleID,
	FieldTestID,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}
