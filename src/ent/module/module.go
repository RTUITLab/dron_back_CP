// Code generated by entc, DO NOT EDIT.

package module

const (
	// Label holds the string label denoting the module type in the database.
	Label = "module"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// EdgeModuleDependcies holds the string denoting the moduledependcies edge name in mutations.
	EdgeModuleDependcies = "ModuleDependcies"
	// EdgeModuleDependOn holds the string denoting the moduledependon edge name in mutations.
	EdgeModuleDependOn = "ModuleDependOn"
	// EdgeSubModules holds the string denoting the submodules edge name in mutations.
	EdgeSubModules = "SubModules"
	// EdgeTest holds the string denoting the test edge name in mutations.
	EdgeTest = "Test"
	// Table holds the table name of the module in the database.
	Table = "Module"
	// ModuleDependciesTable is the table that holds the ModuleDependcies relation/edge.
	ModuleDependciesTable = "ModuleDependcies"
	// ModuleDependciesInverseTable is the table name for the ModuleDependcies entity.
	// It exists in this package in order to avoid circular dependency with the "moduledependcies" package.
	ModuleDependciesInverseTable = "ModuleDependcies"
	// ModuleDependciesColumn is the table column denoting the ModuleDependcies relation/edge.
	ModuleDependciesColumn = "dependent_id"
	// ModuleDependOnTable is the table that holds the ModuleDependOn relation/edge.
	ModuleDependOnTable = "ModuleDependcies"
	// ModuleDependOnInverseTable is the table name for the ModuleDependcies entity.
	// It exists in this package in order to avoid circular dependency with the "moduledependcies" package.
	ModuleDependOnInverseTable = "ModuleDependcies"
	// ModuleDependOnColumn is the table column denoting the ModuleDependOn relation/edge.
	ModuleDependOnColumn = "dependent_on_id"
	// SubModulesTable is the table that holds the SubModules relation/edge.
	SubModulesTable = "SubModule"
	// SubModulesInverseTable is the table name for the SubModule entity.
	// It exists in this package in order to avoid circular dependency with the "submodule" package.
	SubModulesInverseTable = "SubModule"
	// SubModulesColumn is the table column denoting the SubModules relation/edge.
	SubModulesColumn = "module_sub_modules"
	// TestTable is the table that holds the Test relation/edge.
	TestTable = "ModuleTest"
	// TestInverseTable is the table name for the ModuleTest entity.
	// It exists in this package in order to avoid circular dependency with the "moduletest" package.
	TestInverseTable = "ModuleTest"
	// TestColumn is the table column denoting the Test relation/edge.
	TestColumn = "module_id"
)

// Columns holds all SQL columns for module fields.
var Columns = []string{
	FieldID,
	FieldName,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}
