// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/0B1t322/CP-Rosseti-Back/ent/theoreticaltest"
	"github.com/0B1t322/CP-Rosseti-Back/ent/theoreticaltry"
	"github.com/0B1t322/CP-Rosseti-Back/ent/tryanswer"
	"github.com/0B1t322/CP-Rosseti-Back/ent/user"
)

// TheoreticalTryCreate is the builder for creating a TheoreticalTry entity.
type TheoreticalTryCreate struct {
	config
	mutation *TheoreticalTryMutation
	hooks    []Hook
}

// SetStart sets the "start" field.
func (ttc *TheoreticalTryCreate) SetStart(t time.Time) *TheoreticalTryCreate {
	ttc.mutation.SetStart(t)
	return ttc
}

// SetEnd sets the "end" field.
func (ttc *TheoreticalTryCreate) SetEnd(t time.Time) *TheoreticalTryCreate {
	ttc.mutation.SetEnd(t)
	return ttc
}

// SetNillableEnd sets the "end" field if the given value is not nil.
func (ttc *TheoreticalTryCreate) SetNillableEnd(t *time.Time) *TheoreticalTryCreate {
	if t != nil {
		ttc.SetEnd(*t)
	}
	return ttc
}

// SetUserID sets the "user_id" field.
func (ttc *TheoreticalTryCreate) SetUserID(i int) *TheoreticalTryCreate {
	ttc.mutation.SetUserID(i)
	return ttc
}

// SetTheoreticalTestID sets the "theoretical_test_id" field.
func (ttc *TheoreticalTryCreate) SetTheoreticalTestID(i int) *TheoreticalTryCreate {
	ttc.mutation.SetTheoreticalTestID(i)
	return ttc
}

// SetTheoreticalTest sets the "TheoreticalTest" edge to the TheoreticalTest entity.
func (ttc *TheoreticalTryCreate) SetTheoreticalTest(t *TheoreticalTest) *TheoreticalTryCreate {
	return ttc.SetTheoreticalTestID(t.ID)
}

// SetUser sets the "User" edge to the User entity.
func (ttc *TheoreticalTryCreate) SetUser(u *User) *TheoreticalTryCreate {
	return ttc.SetUserID(u.ID)
}

// AddTryAnswerIDs adds the "TryAnswer" edge to the TryAnswer entity by IDs.
func (ttc *TheoreticalTryCreate) AddTryAnswerIDs(ids ...int) *TheoreticalTryCreate {
	ttc.mutation.AddTryAnswerIDs(ids...)
	return ttc
}

// AddTryAnswer adds the "TryAnswer" edges to the TryAnswer entity.
func (ttc *TheoreticalTryCreate) AddTryAnswer(t ...*TryAnswer) *TheoreticalTryCreate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return ttc.AddTryAnswerIDs(ids...)
}

// Mutation returns the TheoreticalTryMutation object of the builder.
func (ttc *TheoreticalTryCreate) Mutation() *TheoreticalTryMutation {
	return ttc.mutation
}

// Save creates the TheoreticalTry in the database.
func (ttc *TheoreticalTryCreate) Save(ctx context.Context) (*TheoreticalTry, error) {
	var (
		err  error
		node *TheoreticalTry
	)
	if len(ttc.hooks) == 0 {
		if err = ttc.check(); err != nil {
			return nil, err
		}
		node, err = ttc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TheoreticalTryMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ttc.check(); err != nil {
				return nil, err
			}
			ttc.mutation = mutation
			if node, err = ttc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(ttc.hooks) - 1; i >= 0; i-- {
			if ttc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ttc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ttc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (ttc *TheoreticalTryCreate) SaveX(ctx context.Context) *TheoreticalTry {
	v, err := ttc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ttc *TheoreticalTryCreate) Exec(ctx context.Context) error {
	_, err := ttc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ttc *TheoreticalTryCreate) ExecX(ctx context.Context) {
	if err := ttc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ttc *TheoreticalTryCreate) check() error {
	if _, ok := ttc.mutation.Start(); !ok {
		return &ValidationError{Name: "start", err: errors.New(`ent: missing required field "start"`)}
	}
	if _, ok := ttc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "user_id"`)}
	}
	if _, ok := ttc.mutation.TheoreticalTestID(); !ok {
		return &ValidationError{Name: "theoretical_test_id", err: errors.New(`ent: missing required field "theoretical_test_id"`)}
	}
	if _, ok := ttc.mutation.TheoreticalTestID(); !ok {
		return &ValidationError{Name: "TheoreticalTest", err: errors.New("ent: missing required edge \"TheoreticalTest\"")}
	}
	if _, ok := ttc.mutation.UserID(); !ok {
		return &ValidationError{Name: "User", err: errors.New("ent: missing required edge \"User\"")}
	}
	return nil
}

func (ttc *TheoreticalTryCreate) sqlSave(ctx context.Context) (*TheoreticalTry, error) {
	_node, _spec := ttc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ttc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (ttc *TheoreticalTryCreate) createSpec() (*TheoreticalTry, *sqlgraph.CreateSpec) {
	var (
		_node = &TheoreticalTry{config: ttc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: theoreticaltry.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: theoreticaltry.FieldID,
			},
		}
	)
	if value, ok := ttc.mutation.Start(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: theoreticaltry.FieldStart,
		})
		_node.Start = value
	}
	if value, ok := ttc.mutation.End(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: theoreticaltry.FieldEnd,
		})
		_node.End = value
	}
	if nodes := ttc.mutation.TheoreticalTestIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   theoreticaltry.TheoreticalTestTable,
			Columns: []string{theoreticaltry.TheoreticalTestColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: theoreticaltest.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.TheoreticalTestID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ttc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   theoreticaltry.UserTable,
			Columns: []string{theoreticaltry.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ttc.mutation.TryAnswerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   theoreticaltry.TryAnswerTable,
			Columns: []string{theoreticaltry.TryAnswerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tryanswer.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// TheoreticalTryCreateBulk is the builder for creating many TheoreticalTry entities in bulk.
type TheoreticalTryCreateBulk struct {
	config
	builders []*TheoreticalTryCreate
}

// Save creates the TheoreticalTry entities in the database.
func (ttcb *TheoreticalTryCreateBulk) Save(ctx context.Context) ([]*TheoreticalTry, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ttcb.builders))
	nodes := make([]*TheoreticalTry, len(ttcb.builders))
	mutators := make([]Mutator, len(ttcb.builders))
	for i := range ttcb.builders {
		func(i int, root context.Context) {
			builder := ttcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TheoreticalTryMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ttcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ttcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ttcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ttcb *TheoreticalTryCreateBulk) SaveX(ctx context.Context) []*TheoreticalTry {
	v, err := ttcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ttcb *TheoreticalTryCreateBulk) Exec(ctx context.Context) error {
	_, err := ttcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ttcb *TheoreticalTryCreateBulk) ExecX(ctx context.Context) {
	if err := ttcb.Exec(ctx); err != nil {
		panic(err)
	}
}
