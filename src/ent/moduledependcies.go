// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/0B1t322/CP-Rosseti-Back/ent/module"
	"github.com/0B1t322/CP-Rosseti-Back/ent/moduledependcies"
)

// ModuleDependcies is the model entity for the ModuleDependcies schema.
type ModuleDependcies struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// DependentID holds the value of the "dependent_id" field.
	DependentID int `json:"dependent_id,omitempty"`
	// DependentOnID holds the value of the "dependent_on_id" field.
	DependentOnID int `json:"dependent_on_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ModuleDependciesQuery when eager-loading is set.
	Edges ModuleDependciesEdges `json:"edges"`
}

// ModuleDependciesEdges holds the relations/edges for other nodes in the graph.
type ModuleDependciesEdges struct {
	// ModuleDependcies holds the value of the ModuleDependcies edge.
	ModuleDependcies *Module `json:"ModuleDependcies,omitempty"`
	// ModuleDependOn holds the value of the ModuleDependOn edge.
	ModuleDependOn *Module `json:"ModuleDependOn,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// ModuleDependciesOrErr returns the ModuleDependcies value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ModuleDependciesEdges) ModuleDependciesOrErr() (*Module, error) {
	if e.loadedTypes[0] {
		if e.ModuleDependcies == nil {
			// The edge ModuleDependcies was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: module.Label}
		}
		return e.ModuleDependcies, nil
	}
	return nil, &NotLoadedError{edge: "ModuleDependcies"}
}

// ModuleDependOnOrErr returns the ModuleDependOn value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ModuleDependciesEdges) ModuleDependOnOrErr() (*Module, error) {
	if e.loadedTypes[1] {
		if e.ModuleDependOn == nil {
			// The edge ModuleDependOn was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: module.Label}
		}
		return e.ModuleDependOn, nil
	}
	return nil, &NotLoadedError{edge: "ModuleDependOn"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ModuleDependcies) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case moduledependcies.FieldID, moduledependcies.FieldDependentID, moduledependcies.FieldDependentOnID:
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type ModuleDependcies", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ModuleDependcies fields.
func (md *ModuleDependcies) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case moduledependcies.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			md.ID = int(value.Int64)
		case moduledependcies.FieldDependentID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field dependent_id", values[i])
			} else if value.Valid {
				md.DependentID = int(value.Int64)
			}
		case moduledependcies.FieldDependentOnID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field dependent_on_id", values[i])
			} else if value.Valid {
				md.DependentOnID = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryModuleDependcies queries the "ModuleDependcies" edge of the ModuleDependcies entity.
func (md *ModuleDependcies) QueryModuleDependcies() *ModuleQuery {
	return (&ModuleDependciesClient{config: md.config}).QueryModuleDependcies(md)
}

// QueryModuleDependOn queries the "ModuleDependOn" edge of the ModuleDependcies entity.
func (md *ModuleDependcies) QueryModuleDependOn() *ModuleQuery {
	return (&ModuleDependciesClient{config: md.config}).QueryModuleDependOn(md)
}

// Update returns a builder for updating this ModuleDependcies.
// Note that you need to call ModuleDependcies.Unwrap() before calling this method if this ModuleDependcies
// was returned from a transaction, and the transaction was committed or rolled back.
func (md *ModuleDependcies) Update() *ModuleDependciesUpdateOne {
	return (&ModuleDependciesClient{config: md.config}).UpdateOne(md)
}

// Unwrap unwraps the ModuleDependcies entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (md *ModuleDependcies) Unwrap() *ModuleDependcies {
	tx, ok := md.config.driver.(*txDriver)
	if !ok {
		panic("ent: ModuleDependcies is not a transactional entity")
	}
	md.config.driver = tx.drv
	return md
}

// String implements the fmt.Stringer.
func (md *ModuleDependcies) String() string {
	var builder strings.Builder
	builder.WriteString("ModuleDependcies(")
	builder.WriteString(fmt.Sprintf("id=%v", md.ID))
	builder.WriteString(", dependent_id=")
	builder.WriteString(fmt.Sprintf("%v", md.DependentID))
	builder.WriteString(", dependent_on_id=")
	builder.WriteString(fmt.Sprintf("%v", md.DependentOnID))
	builder.WriteByte(')')
	return builder.String()
}

// ModuleDependciesSlice is a parsable slice of ModuleDependcies.
type ModuleDependciesSlice []*ModuleDependcies

func (md ModuleDependciesSlice) config(cfg config) {
	for _i := range md {
		md[_i].config = cfg
	}
}
