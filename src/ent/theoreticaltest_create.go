// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/0B1t322/CP-Rosseti-Back/ent/question"
	"github.com/0B1t322/CP-Rosseti-Back/ent/test"
	"github.com/0B1t322/CP-Rosseti-Back/ent/theoreticaltest"
	"github.com/0B1t322/CP-Rosseti-Back/ent/theoreticaltry"
)

// TheoreticalTestCreate is the builder for creating a TheoreticalTest entity.
type TheoreticalTestCreate struct {
	config
	mutation *TheoreticalTestMutation
	hooks    []Hook
}

// SetTestID sets the "test_id" field.
func (ttc *TheoreticalTestCreate) SetTestID(i int) *TheoreticalTestCreate {
	ttc.mutation.SetTestID(i)
	return ttc
}

// SetDuration sets the "duration" field.
func (ttc *TheoreticalTestCreate) SetDuration(i int) *TheoreticalTestCreate {
	ttc.mutation.SetDuration(i)
	return ttc
}

// SetNillableDuration sets the "duration" field if the given value is not nil.
func (ttc *TheoreticalTestCreate) SetNillableDuration(i *int) *TheoreticalTestCreate {
	if i != nil {
		ttc.SetDuration(*i)
	}
	return ttc
}

// SetTest sets the "Test" edge to the Test entity.
func (ttc *TheoreticalTestCreate) SetTest(t *Test) *TheoreticalTestCreate {
	return ttc.SetTestID(t.ID)
}

// AddQuestionIDs adds the "Question" edge to the Question entity by IDs.
func (ttc *TheoreticalTestCreate) AddQuestionIDs(ids ...int) *TheoreticalTestCreate {
	ttc.mutation.AddQuestionIDs(ids...)
	return ttc
}

// AddQuestion adds the "Question" edges to the Question entity.
func (ttc *TheoreticalTestCreate) AddQuestion(q ...*Question) *TheoreticalTestCreate {
	ids := make([]int, len(q))
	for i := range q {
		ids[i] = q[i].ID
	}
	return ttc.AddQuestionIDs(ids...)
}

// AddTheoTryIDs adds the "TheoTry" edge to the TheoreticalTry entity by IDs.
func (ttc *TheoreticalTestCreate) AddTheoTryIDs(ids ...int) *TheoreticalTestCreate {
	ttc.mutation.AddTheoTryIDs(ids...)
	return ttc
}

// AddTheoTry adds the "TheoTry" edges to the TheoreticalTry entity.
func (ttc *TheoreticalTestCreate) AddTheoTry(t ...*TheoreticalTry) *TheoreticalTestCreate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return ttc.AddTheoTryIDs(ids...)
}

// Mutation returns the TheoreticalTestMutation object of the builder.
func (ttc *TheoreticalTestCreate) Mutation() *TheoreticalTestMutation {
	return ttc.mutation
}

// Save creates the TheoreticalTest in the database.
func (ttc *TheoreticalTestCreate) Save(ctx context.Context) (*TheoreticalTest, error) {
	var (
		err  error
		node *TheoreticalTest
	)
	if len(ttc.hooks) == 0 {
		if err = ttc.check(); err != nil {
			return nil, err
		}
		node, err = ttc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TheoreticalTestMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ttc.check(); err != nil {
				return nil, err
			}
			ttc.mutation = mutation
			if node, err = ttc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(ttc.hooks) - 1; i >= 0; i-- {
			if ttc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ttc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ttc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (ttc *TheoreticalTestCreate) SaveX(ctx context.Context) *TheoreticalTest {
	v, err := ttc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ttc *TheoreticalTestCreate) Exec(ctx context.Context) error {
	_, err := ttc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ttc *TheoreticalTestCreate) ExecX(ctx context.Context) {
	if err := ttc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ttc *TheoreticalTestCreate) check() error {
	if _, ok := ttc.mutation.TestID(); !ok {
		return &ValidationError{Name: "test_id", err: errors.New(`ent: missing required field "test_id"`)}
	}
	if _, ok := ttc.mutation.TestID(); !ok {
		return &ValidationError{Name: "Test", err: errors.New("ent: missing required edge \"Test\"")}
	}
	return nil
}

func (ttc *TheoreticalTestCreate) sqlSave(ctx context.Context) (*TheoreticalTest, error) {
	_node, _spec := ttc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ttc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (ttc *TheoreticalTestCreate) createSpec() (*TheoreticalTest, *sqlgraph.CreateSpec) {
	var (
		_node = &TheoreticalTest{config: ttc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: theoreticaltest.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: theoreticaltest.FieldID,
			},
		}
	)
	if value, ok := ttc.mutation.Duration(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: theoreticaltest.FieldDuration,
		})
		_node.Duration = value
	}
	if nodes := ttc.mutation.TestIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   theoreticaltest.TestTable,
			Columns: []string{theoreticaltest.TestColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: test.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.TestID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ttc.mutation.QuestionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   theoreticaltest.QuestionTable,
			Columns: []string{theoreticaltest.QuestionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: question.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ttc.mutation.TheoTryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   theoreticaltest.TheoTryTable,
			Columns: []string{theoreticaltest.TheoTryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: theoreticaltry.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// TheoreticalTestCreateBulk is the builder for creating many TheoreticalTest entities in bulk.
type TheoreticalTestCreateBulk struct {
	config
	builders []*TheoreticalTestCreate
}

// Save creates the TheoreticalTest entities in the database.
func (ttcb *TheoreticalTestCreateBulk) Save(ctx context.Context) ([]*TheoreticalTest, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ttcb.builders))
	nodes := make([]*TheoreticalTest, len(ttcb.builders))
	mutators := make([]Mutator, len(ttcb.builders))
	for i := range ttcb.builders {
		func(i int, root context.Context) {
			builder := ttcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TheoreticalTestMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ttcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ttcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ttcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ttcb *TheoreticalTestCreateBulk) SaveX(ctx context.Context) []*TheoreticalTest {
	v, err := ttcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ttcb *TheoreticalTestCreateBulk) Exec(ctx context.Context) error {
	_, err := ttcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ttcb *TheoreticalTestCreateBulk) ExecX(ctx context.Context) {
	if err := ttcb.Exec(ctx); err != nil {
		panic(err)
	}
}
