// Code generated by entc, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/entsql"
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// AnswersColumns holds the columns for the "answers" table.
	AnswersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "answer", Type: field.TypeString, Size: 2147483647},
		{Name: "correct", Type: field.TypeBool},
		{Name: "question_id", Type: field.TypeInt, Nullable: true},
	}
	// AnswersTable holds the schema information for the "answers" table.
	AnswersTable = &schema.Table{
		Name:       "answers",
		Columns:    AnswersColumns,
		PrimaryKey: []*schema.Column{AnswersColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "answers_Question_Answer",
				Columns:    []*schema.Column{AnswersColumns[3]},
				RefColumns: []*schema.Column{QuestionColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// ModuleColumns holds the columns for the "Module" table.
	ModuleColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "name", Type: field.TypeString},
	}
	// ModuleTable holds the schema information for the "Module" table.
	ModuleTable = &schema.Table{
		Name:       "Module",
		Columns:    ModuleColumns,
		PrimaryKey: []*schema.Column{ModuleColumns[0]},
	}
	// ModuleDependciesColumns holds the columns for the "ModuleDependcies" table.
	ModuleDependciesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "dependent_id", Type: field.TypeInt, Nullable: true},
		{Name: "dependent_on_id", Type: field.TypeInt, Nullable: true},
	}
	// ModuleDependciesTable holds the schema information for the "ModuleDependcies" table.
	ModuleDependciesTable = &schema.Table{
		Name:       "ModuleDependcies",
		Columns:    ModuleDependciesColumns,
		PrimaryKey: []*schema.Column{ModuleDependciesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "ModuleDependcies_Module_ModuleDependcies",
				Columns:    []*schema.Column{ModuleDependciesColumns[1]},
				RefColumns: []*schema.Column{ModuleColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "ModuleDependcies_Module_ModuleDependOn",
				Columns:    []*schema.Column{ModuleDependciesColumns[2]},
				RefColumns: []*schema.Column{ModuleColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// ModuleTestColumns holds the columns for the "ModuleTest" table.
	ModuleTestColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "module_id", Type: field.TypeInt, Nullable: true},
		{Name: "test_id", Type: field.TypeInt, Nullable: true},
	}
	// ModuleTestTable holds the schema information for the "ModuleTest" table.
	ModuleTestTable = &schema.Table{
		Name:       "ModuleTest",
		Columns:    ModuleTestColumns,
		PrimaryKey: []*schema.Column{ModuleTestColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "ModuleTest_Module_Test",
				Columns:    []*schema.Column{ModuleTestColumns[1]},
				RefColumns: []*schema.Column{ModuleColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "ModuleTest_Test_ModuleTest",
				Columns:    []*schema.Column{ModuleTestColumns[2]},
				RefColumns: []*schema.Column{TestColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// PractTestColumns holds the columns for the "PractTest" table.
	PractTestColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "config", Type: field.TypeJSON},
		{Name: "duration", Type: field.TypeInt, Nullable: true},
		{Name: "test_id", Type: field.TypeInt, Nullable: true},
	}
	// PractTestTable holds the schema information for the "PractTest" table.
	PractTestTable = &schema.Table{
		Name:       "PractTest",
		Columns:    PractTestColumns,
		PrimaryKey: []*schema.Column{PractTestColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "PractTest_Test_PractTest",
				Columns:    []*schema.Column{PractTestColumns[3]},
				RefColumns: []*schema.Column{TestColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// QuestionColumns holds the columns for the "Question" table.
	QuestionColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "question", Type: field.TypeString, Size: 2147483647},
		{Name: "theorical_test_id", Type: field.TypeInt, Nullable: true},
	}
	// QuestionTable holds the schema information for the "Question" table.
	QuestionTable = &schema.Table{
		Name:       "Question",
		Columns:    QuestionColumns,
		PrimaryKey: []*schema.Column{QuestionColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "Question_TheoreticalTest_Question",
				Columns:    []*schema.Column{QuestionColumns[2]},
				RefColumns: []*schema.Column{TheoreticalTestColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// RoleColumns holds the columns for the "Role" table.
	RoleColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "role", Type: field.TypeString, Unique: true},
	}
	// RoleTable holds the schema information for the "Role" table.
	RoleTable = &schema.Table{
		Name:       "Role",
		Columns:    RoleColumns,
		PrimaryKey: []*schema.Column{RoleColumns[0]},
	}
	// SubModuleColumns holds the columns for the "SubModule" table.
	SubModuleColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "name", Type: field.TypeString},
		{Name: "text", Type: field.TypeString, Size: 2147483647},
		{Name: "module_sub_modules", Type: field.TypeInt, Nullable: true},
	}
	// SubModuleTable holds the schema information for the "SubModule" table.
	SubModuleTable = &schema.Table{
		Name:       "SubModule",
		Columns:    SubModuleColumns,
		PrimaryKey: []*schema.Column{SubModuleColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "SubModule_Module_SubModules",
				Columns:    []*schema.Column{SubModuleColumns[3]},
				RefColumns: []*schema.Column{ModuleColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// SubModuleTestColumns holds the columns for the "SubModuleTest" table.
	SubModuleTestColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "submodule_id", Type: field.TypeInt, Unique: true, Nullable: true},
		{Name: "test_id", Type: field.TypeInt, Nullable: true},
	}
	// SubModuleTestTable holds the schema information for the "SubModuleTest" table.
	SubModuleTestTable = &schema.Table{
		Name:       "SubModuleTest",
		Columns:    SubModuleTestColumns,
		PrimaryKey: []*schema.Column{SubModuleTestColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "SubModuleTest_SubModule_Test",
				Columns:    []*schema.Column{SubModuleTestColumns[1]},
				RefColumns: []*schema.Column{SubModuleColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "SubModuleTest_Test_SubmoduleTest",
				Columns:    []*schema.Column{SubModuleTestColumns[2]},
				RefColumns: []*schema.Column{TestColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// TaskColumns holds the columns for the "Task" table.
	TaskColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "task", Type: field.TypeString, Size: 2147483647},
		{Name: "pract_test_id", Type: field.TypeInt, Unique: true, Nullable: true},
	}
	// TaskTable holds the schema information for the "Task" table.
	TaskTable = &schema.Table{
		Name:       "Task",
		Columns:    TaskColumns,
		PrimaryKey: []*schema.Column{TaskColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "Task_PractTest_Task",
				Columns:    []*schema.Column{TaskColumns[2]},
				RefColumns: []*schema.Column{PractTestColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// TestColumns holds the columns for the "Test" table.
	TestColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "test_type", Type: field.TypeString},
	}
	// TestTable holds the schema information for the "Test" table.
	TestTable = &schema.Table{
		Name:       "Test",
		Columns:    TestColumns,
		PrimaryKey: []*schema.Column{TestColumns[0]},
	}
	// TheoreticalTestColumns holds the columns for the "TheoreticalTest" table.
	TheoreticalTestColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "duration", Type: field.TypeInt, Nullable: true},
		{Name: "test_id", Type: field.TypeInt, Nullable: true},
	}
	// TheoreticalTestTable holds the schema information for the "TheoreticalTest" table.
	TheoreticalTestTable = &schema.Table{
		Name:       "TheoreticalTest",
		Columns:    TheoreticalTestColumns,
		PrimaryKey: []*schema.Column{TheoreticalTestColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "TheoreticalTest_Test_TherTest",
				Columns:    []*schema.Column{TheoreticalTestColumns[2]},
				RefColumns: []*schema.Column{TestColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// TheoreticalTryColumns holds the columns for the "TheoreticalTry" table.
	TheoreticalTryColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "start", Type: field.TypeTime},
		{Name: "end", Type: field.TypeTime, Nullable: true},
		{Name: "theoretical_test_id", Type: field.TypeInt, Nullable: true},
		{Name: "user_id", Type: field.TypeInt, Nullable: true},
	}
	// TheoreticalTryTable holds the schema information for the "TheoreticalTry" table.
	TheoreticalTryTable = &schema.Table{
		Name:       "TheoreticalTry",
		Columns:    TheoreticalTryColumns,
		PrimaryKey: []*schema.Column{TheoreticalTryColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "TheoreticalTry_TheoreticalTest_TheoTry",
				Columns:    []*schema.Column{TheoreticalTryColumns[3]},
				RefColumns: []*schema.Column{TheoreticalTestColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "TheoreticalTry_User_TheoTry",
				Columns:    []*schema.Column{TheoreticalTryColumns[4]},
				RefColumns: []*schema.Column{UserColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// TryAnswerColumns holds the columns for the "TryAnswer" table.
	TryAnswerColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "asnwer", Type: field.TypeString, Size: 2147483647},
		{Name: "correct", Type: field.TypeBool, Nullable: true},
		{Name: "question_id", Type: field.TypeInt, Nullable: true},
		{Name: "try_id", Type: field.TypeInt, Nullable: true},
	}
	// TryAnswerTable holds the schema information for the "TryAnswer" table.
	TryAnswerTable = &schema.Table{
		Name:       "TryAnswer",
		Columns:    TryAnswerColumns,
		PrimaryKey: []*schema.Column{TryAnswerColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "TryAnswer_Question_TryAnswer",
				Columns:    []*schema.Column{TryAnswerColumns[3]},
				RefColumns: []*schema.Column{QuestionColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "TryAnswer_TheoreticalTry_TryAnswer",
				Columns:    []*schema.Column{TryAnswerColumns[4]},
				RefColumns: []*schema.Column{TheoreticalTryColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// UserColumns holds the columns for the "User" table.
	UserColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "login", Type: field.TypeString, Unique: true},
		{Name: "password", Type: field.TypeString},
		{Name: "role_user", Type: field.TypeInt, Nullable: true},
	}
	// UserTable holds the schema information for the "User" table.
	UserTable = &schema.Table{
		Name:       "User",
		Columns:    UserColumns,
		PrimaryKey: []*schema.Column{UserColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "User_Role_User",
				Columns:    []*schema.Column{UserColumns[3]},
				RefColumns: []*schema.Column{RoleColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		AnswersTable,
		ModuleTable,
		ModuleDependciesTable,
		ModuleTestTable,
		PractTestTable,
		QuestionTable,
		RoleTable,
		SubModuleTable,
		SubModuleTestTable,
		TaskTable,
		TestTable,
		TheoreticalTestTable,
		TheoreticalTryTable,
		TryAnswerTable,
		UserTable,
	}
)

func init() {
	AnswersTable.ForeignKeys[0].RefTable = QuestionTable
	ModuleTable.Annotation = &entsql.Annotation{
		Table: "Module",
	}
	ModuleDependciesTable.ForeignKeys[0].RefTable = ModuleTable
	ModuleDependciesTable.ForeignKeys[1].RefTable = ModuleTable
	ModuleDependciesTable.Annotation = &entsql.Annotation{
		Table: "ModuleDependcies",
	}
	ModuleTestTable.ForeignKeys[0].RefTable = ModuleTable
	ModuleTestTable.ForeignKeys[1].RefTable = TestTable
	ModuleTestTable.Annotation = &entsql.Annotation{
		Table: "ModuleTest",
	}
	PractTestTable.ForeignKeys[0].RefTable = TestTable
	PractTestTable.Annotation = &entsql.Annotation{
		Table: "PractTest",
	}
	QuestionTable.ForeignKeys[0].RefTable = TheoreticalTestTable
	QuestionTable.Annotation = &entsql.Annotation{
		Table: "Question",
	}
	RoleTable.Annotation = &entsql.Annotation{
		Table: "Role",
	}
	SubModuleTable.ForeignKeys[0].RefTable = ModuleTable
	SubModuleTable.Annotation = &entsql.Annotation{
		Table: "SubModule",
	}
	SubModuleTestTable.ForeignKeys[0].RefTable = SubModuleTable
	SubModuleTestTable.ForeignKeys[1].RefTable = TestTable
	SubModuleTestTable.Annotation = &entsql.Annotation{
		Table: "SubModuleTest",
	}
	TaskTable.ForeignKeys[0].RefTable = PractTestTable
	TaskTable.Annotation = &entsql.Annotation{
		Table: "Task",
	}
	TestTable.Annotation = &entsql.Annotation{
		Table: "Test",
	}
	TheoreticalTestTable.ForeignKeys[0].RefTable = TestTable
	TheoreticalTestTable.Annotation = &entsql.Annotation{
		Table: "TheoreticalTest",
	}
	TheoreticalTryTable.ForeignKeys[0].RefTable = TheoreticalTestTable
	TheoreticalTryTable.ForeignKeys[1].RefTable = UserTable
	TheoreticalTryTable.Annotation = &entsql.Annotation{
		Table: "TheoreticalTry",
	}
	TryAnswerTable.ForeignKeys[0].RefTable = QuestionTable
	TryAnswerTable.ForeignKeys[1].RefTable = TheoreticalTryTable
	TryAnswerTable.Annotation = &entsql.Annotation{
		Table: "TryAnswer",
	}
	UserTable.ForeignKeys[0].RefTable = RoleTable
	UserTable.Annotation = &entsql.Annotation{
		Table: "User",
	}
}
