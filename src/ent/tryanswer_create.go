// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/0B1t322/CP-Rosseti-Back/ent/question"
	"github.com/0B1t322/CP-Rosseti-Back/ent/theoreticaltry"
	"github.com/0B1t322/CP-Rosseti-Back/ent/tryanswer"
)

// TryAnswerCreate is the builder for creating a TryAnswer entity.
type TryAnswerCreate struct {
	config
	mutation *TryAnswerMutation
	hooks    []Hook
}

// SetTryID sets the "try_id" field.
func (tac *TryAnswerCreate) SetTryID(i int) *TryAnswerCreate {
	tac.mutation.SetTryID(i)
	return tac
}

// SetQuestionID sets the "question_id" field.
func (tac *TryAnswerCreate) SetQuestionID(i int) *TryAnswerCreate {
	tac.mutation.SetQuestionID(i)
	return tac
}

// SetAsnwer sets the "asnwer" field.
func (tac *TryAnswerCreate) SetAsnwer(s string) *TryAnswerCreate {
	tac.mutation.SetAsnwer(s)
	return tac
}

// SetCorrect sets the "correct" field.
func (tac *TryAnswerCreate) SetCorrect(b bool) *TryAnswerCreate {
	tac.mutation.SetCorrect(b)
	return tac
}

// SetNillableCorrect sets the "correct" field if the given value is not nil.
func (tac *TryAnswerCreate) SetNillableCorrect(b *bool) *TryAnswerCreate {
	if b != nil {
		tac.SetCorrect(*b)
	}
	return tac
}

// SetTheoreticalTryID sets the "TheoreticalTry" edge to the TheoreticalTry entity by ID.
func (tac *TryAnswerCreate) SetTheoreticalTryID(id int) *TryAnswerCreate {
	tac.mutation.SetTheoreticalTryID(id)
	return tac
}

// SetTheoreticalTry sets the "TheoreticalTry" edge to the TheoreticalTry entity.
func (tac *TryAnswerCreate) SetTheoreticalTry(t *TheoreticalTry) *TryAnswerCreate {
	return tac.SetTheoreticalTryID(t.ID)
}

// SetQuestion sets the "Question" edge to the Question entity.
func (tac *TryAnswerCreate) SetQuestion(q *Question) *TryAnswerCreate {
	return tac.SetQuestionID(q.ID)
}

// Mutation returns the TryAnswerMutation object of the builder.
func (tac *TryAnswerCreate) Mutation() *TryAnswerMutation {
	return tac.mutation
}

// Save creates the TryAnswer in the database.
func (tac *TryAnswerCreate) Save(ctx context.Context) (*TryAnswer, error) {
	var (
		err  error
		node *TryAnswer
	)
	if len(tac.hooks) == 0 {
		if err = tac.check(); err != nil {
			return nil, err
		}
		node, err = tac.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TryAnswerMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = tac.check(); err != nil {
				return nil, err
			}
			tac.mutation = mutation
			if node, err = tac.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(tac.hooks) - 1; i >= 0; i-- {
			if tac.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = tac.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tac.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (tac *TryAnswerCreate) SaveX(ctx context.Context) *TryAnswer {
	v, err := tac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tac *TryAnswerCreate) Exec(ctx context.Context) error {
	_, err := tac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tac *TryAnswerCreate) ExecX(ctx context.Context) {
	if err := tac.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tac *TryAnswerCreate) check() error {
	if _, ok := tac.mutation.TryID(); !ok {
		return &ValidationError{Name: "try_id", err: errors.New(`ent: missing required field "try_id"`)}
	}
	if _, ok := tac.mutation.QuestionID(); !ok {
		return &ValidationError{Name: "question_id", err: errors.New(`ent: missing required field "question_id"`)}
	}
	if _, ok := tac.mutation.Asnwer(); !ok {
		return &ValidationError{Name: "asnwer", err: errors.New(`ent: missing required field "asnwer"`)}
	}
	if _, ok := tac.mutation.TheoreticalTryID(); !ok {
		return &ValidationError{Name: "TheoreticalTry", err: errors.New("ent: missing required edge \"TheoreticalTry\"")}
	}
	if _, ok := tac.mutation.QuestionID(); !ok {
		return &ValidationError{Name: "Question", err: errors.New("ent: missing required edge \"Question\"")}
	}
	return nil
}

func (tac *TryAnswerCreate) sqlSave(ctx context.Context) (*TryAnswer, error) {
	_node, _spec := tac.createSpec()
	if err := sqlgraph.CreateNode(ctx, tac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (tac *TryAnswerCreate) createSpec() (*TryAnswer, *sqlgraph.CreateSpec) {
	var (
		_node = &TryAnswer{config: tac.config}
		_spec = &sqlgraph.CreateSpec{
			Table: tryanswer.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: tryanswer.FieldID,
			},
		}
	)
	if value, ok := tac.mutation.Asnwer(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tryanswer.FieldAsnwer,
		})
		_node.Asnwer = value
	}
	if value, ok := tac.mutation.Correct(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: tryanswer.FieldCorrect,
		})
		_node.Correct = value
	}
	if nodes := tac.mutation.TheoreticalTryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tryanswer.TheoreticalTryTable,
			Columns: []string{tryanswer.TheoreticalTryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: theoreticaltry.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.TryID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tac.mutation.QuestionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tryanswer.QuestionTable,
			Columns: []string{tryanswer.QuestionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: question.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.QuestionID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// TryAnswerCreateBulk is the builder for creating many TryAnswer entities in bulk.
type TryAnswerCreateBulk struct {
	config
	builders []*TryAnswerCreate
}

// Save creates the TryAnswer entities in the database.
func (tacb *TryAnswerCreateBulk) Save(ctx context.Context) ([]*TryAnswer, error) {
	specs := make([]*sqlgraph.CreateSpec, len(tacb.builders))
	nodes := make([]*TryAnswer, len(tacb.builders))
	mutators := make([]Mutator, len(tacb.builders))
	for i := range tacb.builders {
		func(i int, root context.Context) {
			builder := tacb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TryAnswerMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tacb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tacb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tacb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tacb *TryAnswerCreateBulk) SaveX(ctx context.Context) []*TryAnswer {
	v, err := tacb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tacb *TryAnswerCreateBulk) Exec(ctx context.Context) error {
	_, err := tacb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tacb *TryAnswerCreateBulk) ExecX(ctx context.Context) {
	if err := tacb.Exec(ctx); err != nil {
		panic(err)
	}
}
