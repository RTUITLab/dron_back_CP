// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/0B1t322/CP-Rosseti-Back/ent/practtest"
	"github.com/0B1t322/CP-Rosseti-Back/ent/submodule"
	"github.com/0B1t322/CP-Rosseti-Back/ent/submoduletest"
	"github.com/0B1t322/CP-Rosseti-Back/ent/theoreticaltest"
)

// SubModuleTestCreate is the builder for creating a SubModuleTest entity.
type SubModuleTestCreate struct {
	config
	mutation *SubModuleTestMutation
	hooks    []Hook
}

// SetSubmoduleID sets the "submodule_id" field.
func (smtc *SubModuleTestCreate) SetSubmoduleID(i int) *SubModuleTestCreate {
	smtc.mutation.SetSubmoduleID(i)
	return smtc
}

// SetSubModuleID sets the "SubModule" edge to the SubModule entity by ID.
func (smtc *SubModuleTestCreate) SetSubModuleID(id int) *SubModuleTestCreate {
	smtc.mutation.SetSubModuleID(id)
	return smtc
}

// SetSubModule sets the "SubModule" edge to the SubModule entity.
func (smtc *SubModuleTestCreate) SetSubModule(s *SubModule) *SubModuleTestCreate {
	return smtc.SetSubModuleID(s.ID)
}

// SetTherTestID sets the "TherTest" edge to the TheoreticalTest entity by ID.
func (smtc *SubModuleTestCreate) SetTherTestID(id int) *SubModuleTestCreate {
	smtc.mutation.SetTherTestID(id)
	return smtc
}

// SetNillableTherTestID sets the "TherTest" edge to the TheoreticalTest entity by ID if the given value is not nil.
func (smtc *SubModuleTestCreate) SetNillableTherTestID(id *int) *SubModuleTestCreate {
	if id != nil {
		smtc = smtc.SetTherTestID(*id)
	}
	return smtc
}

// SetTherTest sets the "TherTest" edge to the TheoreticalTest entity.
func (smtc *SubModuleTestCreate) SetTherTest(t *TheoreticalTest) *SubModuleTestCreate {
	return smtc.SetTherTestID(t.ID)
}

// SetPractTestID sets the "PractTest" edge to the PractTest entity by ID.
func (smtc *SubModuleTestCreate) SetPractTestID(id int) *SubModuleTestCreate {
	smtc.mutation.SetPractTestID(id)
	return smtc
}

// SetNillablePractTestID sets the "PractTest" edge to the PractTest entity by ID if the given value is not nil.
func (smtc *SubModuleTestCreate) SetNillablePractTestID(id *int) *SubModuleTestCreate {
	if id != nil {
		smtc = smtc.SetPractTestID(*id)
	}
	return smtc
}

// SetPractTest sets the "PractTest" edge to the PractTest entity.
func (smtc *SubModuleTestCreate) SetPractTest(p *PractTest) *SubModuleTestCreate {
	return smtc.SetPractTestID(p.ID)
}

// Mutation returns the SubModuleTestMutation object of the builder.
func (smtc *SubModuleTestCreate) Mutation() *SubModuleTestMutation {
	return smtc.mutation
}

// Save creates the SubModuleTest in the database.
func (smtc *SubModuleTestCreate) Save(ctx context.Context) (*SubModuleTest, error) {
	var (
		err  error
		node *SubModuleTest
	)
	if len(smtc.hooks) == 0 {
		if err = smtc.check(); err != nil {
			return nil, err
		}
		node, err = smtc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SubModuleTestMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = smtc.check(); err != nil {
				return nil, err
			}
			smtc.mutation = mutation
			if node, err = smtc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(smtc.hooks) - 1; i >= 0; i-- {
			if smtc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = smtc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, smtc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (smtc *SubModuleTestCreate) SaveX(ctx context.Context) *SubModuleTest {
	v, err := smtc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (smtc *SubModuleTestCreate) Exec(ctx context.Context) error {
	_, err := smtc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (smtc *SubModuleTestCreate) ExecX(ctx context.Context) {
	if err := smtc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (smtc *SubModuleTestCreate) check() error {
	if _, ok := smtc.mutation.SubmoduleID(); !ok {
		return &ValidationError{Name: "submodule_id", err: errors.New(`ent: missing required field "submodule_id"`)}
	}
	if _, ok := smtc.mutation.SubModuleID(); !ok {
		return &ValidationError{Name: "SubModule", err: errors.New("ent: missing required edge \"SubModule\"")}
	}
	return nil
}

func (smtc *SubModuleTestCreate) sqlSave(ctx context.Context) (*SubModuleTest, error) {
	_node, _spec := smtc.createSpec()
	if err := sqlgraph.CreateNode(ctx, smtc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (smtc *SubModuleTestCreate) createSpec() (*SubModuleTest, *sqlgraph.CreateSpec) {
	var (
		_node = &SubModuleTest{config: smtc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: submoduletest.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: submoduletest.FieldID,
			},
		}
	)
	if nodes := smtc.mutation.SubModuleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   submoduletest.SubModuleTable,
			Columns: []string{submoduletest.SubModuleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: submodule.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.SubmoduleID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := smtc.mutation.TherTestIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   submoduletest.TherTestTable,
			Columns: []string{submoduletest.TherTestColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: theoreticaltest.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := smtc.mutation.PractTestIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   submoduletest.PractTestTable,
			Columns: []string{submoduletest.PractTestColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: practtest.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// SubModuleTestCreateBulk is the builder for creating many SubModuleTest entities in bulk.
type SubModuleTestCreateBulk struct {
	config
	builders []*SubModuleTestCreate
}

// Save creates the SubModuleTest entities in the database.
func (smtcb *SubModuleTestCreateBulk) Save(ctx context.Context) ([]*SubModuleTest, error) {
	specs := make([]*sqlgraph.CreateSpec, len(smtcb.builders))
	nodes := make([]*SubModuleTest, len(smtcb.builders))
	mutators := make([]Mutator, len(smtcb.builders))
	for i := range smtcb.builders {
		func(i int, root context.Context) {
			builder := smtcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SubModuleTestMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, smtcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, smtcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, smtcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (smtcb *SubModuleTestCreateBulk) SaveX(ctx context.Context) []*SubModuleTest {
	v, err := smtcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (smtcb *SubModuleTestCreateBulk) Exec(ctx context.Context) error {
	_, err := smtcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (smtcb *SubModuleTestCreateBulk) ExecX(ctx context.Context) {
	if err := smtcb.Exec(ctx); err != nil {
		panic(err)
	}
}
