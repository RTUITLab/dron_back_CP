// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/0B1t322/CP-Rosseti-Back/ent/moduletest"
	"github.com/0B1t322/CP-Rosseti-Back/ent/practtest"
	"github.com/0B1t322/CP-Rosseti-Back/ent/predicate"
	"github.com/0B1t322/CP-Rosseti-Back/ent/submoduletest"
	"github.com/0B1t322/CP-Rosseti-Back/ent/test"
	"github.com/0B1t322/CP-Rosseti-Back/ent/theoreticaltest"
)

// TestUpdate is the builder for updating Test entities.
type TestUpdate struct {
	config
	hooks    []Hook
	mutation *TestMutation
}

// Where appends a list predicates to the TestUpdate builder.
func (tu *TestUpdate) Where(ps ...predicate.Test) *TestUpdate {
	tu.mutation.Where(ps...)
	return tu
}

// SetTestType sets the "TestType" field.
func (tu *TestUpdate) SetTestType(s string) *TestUpdate {
	tu.mutation.SetTestType(s)
	return tu
}

// AddModuleTestIDs adds the "ModuleTest" edge to the ModuleTest entity by IDs.
func (tu *TestUpdate) AddModuleTestIDs(ids ...int) *TestUpdate {
	tu.mutation.AddModuleTestIDs(ids...)
	return tu
}

// AddModuleTest adds the "ModuleTest" edges to the ModuleTest entity.
func (tu *TestUpdate) AddModuleTest(m ...*ModuleTest) *TestUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return tu.AddModuleTestIDs(ids...)
}

// AddSubmoduleTestIDs adds the "SubmoduleTest" edge to the SubModuleTest entity by IDs.
func (tu *TestUpdate) AddSubmoduleTestIDs(ids ...int) *TestUpdate {
	tu.mutation.AddSubmoduleTestIDs(ids...)
	return tu
}

// AddSubmoduleTest adds the "SubmoduleTest" edges to the SubModuleTest entity.
func (tu *TestUpdate) AddSubmoduleTest(s ...*SubModuleTest) *TestUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return tu.AddSubmoduleTestIDs(ids...)
}

// AddTherTestIDs adds the "TherTest" edge to the TheoreticalTest entity by IDs.
func (tu *TestUpdate) AddTherTestIDs(ids ...int) *TestUpdate {
	tu.mutation.AddTherTestIDs(ids...)
	return tu
}

// AddTherTest adds the "TherTest" edges to the TheoreticalTest entity.
func (tu *TestUpdate) AddTherTest(t ...*TheoreticalTest) *TestUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tu.AddTherTestIDs(ids...)
}

// AddPractTestIDs adds the "PractTest" edge to the PractTest entity by IDs.
func (tu *TestUpdate) AddPractTestIDs(ids ...int) *TestUpdate {
	tu.mutation.AddPractTestIDs(ids...)
	return tu
}

// AddPractTest adds the "PractTest" edges to the PractTest entity.
func (tu *TestUpdate) AddPractTest(p ...*PractTest) *TestUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return tu.AddPractTestIDs(ids...)
}

// Mutation returns the TestMutation object of the builder.
func (tu *TestUpdate) Mutation() *TestMutation {
	return tu.mutation
}

// ClearModuleTest clears all "ModuleTest" edges to the ModuleTest entity.
func (tu *TestUpdate) ClearModuleTest() *TestUpdate {
	tu.mutation.ClearModuleTest()
	return tu
}

// RemoveModuleTestIDs removes the "ModuleTest" edge to ModuleTest entities by IDs.
func (tu *TestUpdate) RemoveModuleTestIDs(ids ...int) *TestUpdate {
	tu.mutation.RemoveModuleTestIDs(ids...)
	return tu
}

// RemoveModuleTest removes "ModuleTest" edges to ModuleTest entities.
func (tu *TestUpdate) RemoveModuleTest(m ...*ModuleTest) *TestUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return tu.RemoveModuleTestIDs(ids...)
}

// ClearSubmoduleTest clears all "SubmoduleTest" edges to the SubModuleTest entity.
func (tu *TestUpdate) ClearSubmoduleTest() *TestUpdate {
	tu.mutation.ClearSubmoduleTest()
	return tu
}

// RemoveSubmoduleTestIDs removes the "SubmoduleTest" edge to SubModuleTest entities by IDs.
func (tu *TestUpdate) RemoveSubmoduleTestIDs(ids ...int) *TestUpdate {
	tu.mutation.RemoveSubmoduleTestIDs(ids...)
	return tu
}

// RemoveSubmoduleTest removes "SubmoduleTest" edges to SubModuleTest entities.
func (tu *TestUpdate) RemoveSubmoduleTest(s ...*SubModuleTest) *TestUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return tu.RemoveSubmoduleTestIDs(ids...)
}

// ClearTherTest clears all "TherTest" edges to the TheoreticalTest entity.
func (tu *TestUpdate) ClearTherTest() *TestUpdate {
	tu.mutation.ClearTherTest()
	return tu
}

// RemoveTherTestIDs removes the "TherTest" edge to TheoreticalTest entities by IDs.
func (tu *TestUpdate) RemoveTherTestIDs(ids ...int) *TestUpdate {
	tu.mutation.RemoveTherTestIDs(ids...)
	return tu
}

// RemoveTherTest removes "TherTest" edges to TheoreticalTest entities.
func (tu *TestUpdate) RemoveTherTest(t ...*TheoreticalTest) *TestUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tu.RemoveTherTestIDs(ids...)
}

// ClearPractTest clears all "PractTest" edges to the PractTest entity.
func (tu *TestUpdate) ClearPractTest() *TestUpdate {
	tu.mutation.ClearPractTest()
	return tu
}

// RemovePractTestIDs removes the "PractTest" edge to PractTest entities by IDs.
func (tu *TestUpdate) RemovePractTestIDs(ids ...int) *TestUpdate {
	tu.mutation.RemovePractTestIDs(ids...)
	return tu
}

// RemovePractTest removes "PractTest" edges to PractTest entities.
func (tu *TestUpdate) RemovePractTest(p ...*PractTest) *TestUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return tu.RemovePractTestIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tu *TestUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(tu.hooks) == 0 {
		affected, err = tu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TestMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			tu.mutation = mutation
			affected, err = tu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(tu.hooks) - 1; i >= 0; i-- {
			if tu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = tu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (tu *TestUpdate) SaveX(ctx context.Context) int {
	affected, err := tu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tu *TestUpdate) Exec(ctx context.Context) error {
	_, err := tu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tu *TestUpdate) ExecX(ctx context.Context) {
	if err := tu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (tu *TestUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   test.Table,
			Columns: test.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: test.FieldID,
			},
		},
	}
	if ps := tu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tu.mutation.TestType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: test.FieldTestType,
		})
	}
	if tu.mutation.ModuleTestCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   test.ModuleTestTable,
			Columns: []string{test.ModuleTestColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: moduletest.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.RemovedModuleTestIDs(); len(nodes) > 0 && !tu.mutation.ModuleTestCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   test.ModuleTestTable,
			Columns: []string{test.ModuleTestColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: moduletest.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.ModuleTestIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   test.ModuleTestTable,
			Columns: []string{test.ModuleTestColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: moduletest.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.SubmoduleTestCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   test.SubmoduleTestTable,
			Columns: []string{test.SubmoduleTestColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: submoduletest.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.RemovedSubmoduleTestIDs(); len(nodes) > 0 && !tu.mutation.SubmoduleTestCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   test.SubmoduleTestTable,
			Columns: []string{test.SubmoduleTestColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: submoduletest.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.SubmoduleTestIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   test.SubmoduleTestTable,
			Columns: []string{test.SubmoduleTestColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: submoduletest.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.TherTestCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   test.TherTestTable,
			Columns: []string{test.TherTestColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: theoreticaltest.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.RemovedTherTestIDs(); len(nodes) > 0 && !tu.mutation.TherTestCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   test.TherTestTable,
			Columns: []string{test.TherTestColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: theoreticaltest.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.TherTestIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   test.TherTestTable,
			Columns: []string{test.TherTestColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: theoreticaltest.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.PractTestCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   test.PractTestTable,
			Columns: []string{test.PractTestColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: practtest.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.RemovedPractTestIDs(); len(nodes) > 0 && !tu.mutation.PractTestCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   test.PractTestTable,
			Columns: []string{test.PractTestColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: practtest.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.PractTestIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   test.PractTestTable,
			Columns: []string{test.PractTestColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: practtest.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{test.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// TestUpdateOne is the builder for updating a single Test entity.
type TestUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TestMutation
}

// SetTestType sets the "TestType" field.
func (tuo *TestUpdateOne) SetTestType(s string) *TestUpdateOne {
	tuo.mutation.SetTestType(s)
	return tuo
}

// AddModuleTestIDs adds the "ModuleTest" edge to the ModuleTest entity by IDs.
func (tuo *TestUpdateOne) AddModuleTestIDs(ids ...int) *TestUpdateOne {
	tuo.mutation.AddModuleTestIDs(ids...)
	return tuo
}

// AddModuleTest adds the "ModuleTest" edges to the ModuleTest entity.
func (tuo *TestUpdateOne) AddModuleTest(m ...*ModuleTest) *TestUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return tuo.AddModuleTestIDs(ids...)
}

// AddSubmoduleTestIDs adds the "SubmoduleTest" edge to the SubModuleTest entity by IDs.
func (tuo *TestUpdateOne) AddSubmoduleTestIDs(ids ...int) *TestUpdateOne {
	tuo.mutation.AddSubmoduleTestIDs(ids...)
	return tuo
}

// AddSubmoduleTest adds the "SubmoduleTest" edges to the SubModuleTest entity.
func (tuo *TestUpdateOne) AddSubmoduleTest(s ...*SubModuleTest) *TestUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return tuo.AddSubmoduleTestIDs(ids...)
}

// AddTherTestIDs adds the "TherTest" edge to the TheoreticalTest entity by IDs.
func (tuo *TestUpdateOne) AddTherTestIDs(ids ...int) *TestUpdateOne {
	tuo.mutation.AddTherTestIDs(ids...)
	return tuo
}

// AddTherTest adds the "TherTest" edges to the TheoreticalTest entity.
func (tuo *TestUpdateOne) AddTherTest(t ...*TheoreticalTest) *TestUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tuo.AddTherTestIDs(ids...)
}

// AddPractTestIDs adds the "PractTest" edge to the PractTest entity by IDs.
func (tuo *TestUpdateOne) AddPractTestIDs(ids ...int) *TestUpdateOne {
	tuo.mutation.AddPractTestIDs(ids...)
	return tuo
}

// AddPractTest adds the "PractTest" edges to the PractTest entity.
func (tuo *TestUpdateOne) AddPractTest(p ...*PractTest) *TestUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return tuo.AddPractTestIDs(ids...)
}

// Mutation returns the TestMutation object of the builder.
func (tuo *TestUpdateOne) Mutation() *TestMutation {
	return tuo.mutation
}

// ClearModuleTest clears all "ModuleTest" edges to the ModuleTest entity.
func (tuo *TestUpdateOne) ClearModuleTest() *TestUpdateOne {
	tuo.mutation.ClearModuleTest()
	return tuo
}

// RemoveModuleTestIDs removes the "ModuleTest" edge to ModuleTest entities by IDs.
func (tuo *TestUpdateOne) RemoveModuleTestIDs(ids ...int) *TestUpdateOne {
	tuo.mutation.RemoveModuleTestIDs(ids...)
	return tuo
}

// RemoveModuleTest removes "ModuleTest" edges to ModuleTest entities.
func (tuo *TestUpdateOne) RemoveModuleTest(m ...*ModuleTest) *TestUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return tuo.RemoveModuleTestIDs(ids...)
}

// ClearSubmoduleTest clears all "SubmoduleTest" edges to the SubModuleTest entity.
func (tuo *TestUpdateOne) ClearSubmoduleTest() *TestUpdateOne {
	tuo.mutation.ClearSubmoduleTest()
	return tuo
}

// RemoveSubmoduleTestIDs removes the "SubmoduleTest" edge to SubModuleTest entities by IDs.
func (tuo *TestUpdateOne) RemoveSubmoduleTestIDs(ids ...int) *TestUpdateOne {
	tuo.mutation.RemoveSubmoduleTestIDs(ids...)
	return tuo
}

// RemoveSubmoduleTest removes "SubmoduleTest" edges to SubModuleTest entities.
func (tuo *TestUpdateOne) RemoveSubmoduleTest(s ...*SubModuleTest) *TestUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return tuo.RemoveSubmoduleTestIDs(ids...)
}

// ClearTherTest clears all "TherTest" edges to the TheoreticalTest entity.
func (tuo *TestUpdateOne) ClearTherTest() *TestUpdateOne {
	tuo.mutation.ClearTherTest()
	return tuo
}

// RemoveTherTestIDs removes the "TherTest" edge to TheoreticalTest entities by IDs.
func (tuo *TestUpdateOne) RemoveTherTestIDs(ids ...int) *TestUpdateOne {
	tuo.mutation.RemoveTherTestIDs(ids...)
	return tuo
}

// RemoveTherTest removes "TherTest" edges to TheoreticalTest entities.
func (tuo *TestUpdateOne) RemoveTherTest(t ...*TheoreticalTest) *TestUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tuo.RemoveTherTestIDs(ids...)
}

// ClearPractTest clears all "PractTest" edges to the PractTest entity.
func (tuo *TestUpdateOne) ClearPractTest() *TestUpdateOne {
	tuo.mutation.ClearPractTest()
	return tuo
}

// RemovePractTestIDs removes the "PractTest" edge to PractTest entities by IDs.
func (tuo *TestUpdateOne) RemovePractTestIDs(ids ...int) *TestUpdateOne {
	tuo.mutation.RemovePractTestIDs(ids...)
	return tuo
}

// RemovePractTest removes "PractTest" edges to PractTest entities.
func (tuo *TestUpdateOne) RemovePractTest(p ...*PractTest) *TestUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return tuo.RemovePractTestIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tuo *TestUpdateOne) Select(field string, fields ...string) *TestUpdateOne {
	tuo.fields = append([]string{field}, fields...)
	return tuo
}

// Save executes the query and returns the updated Test entity.
func (tuo *TestUpdateOne) Save(ctx context.Context) (*Test, error) {
	var (
		err  error
		node *Test
	)
	if len(tuo.hooks) == 0 {
		node, err = tuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TestMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			tuo.mutation = mutation
			node, err = tuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(tuo.hooks) - 1; i >= 0; i-- {
			if tuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = tuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (tuo *TestUpdateOne) SaveX(ctx context.Context) *Test {
	node, err := tuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tuo *TestUpdateOne) Exec(ctx context.Context) error {
	_, err := tuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tuo *TestUpdateOne) ExecX(ctx context.Context) {
	if err := tuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (tuo *TestUpdateOne) sqlSave(ctx context.Context) (_node *Test, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   test.Table,
			Columns: test.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: test.FieldID,
			},
		},
	}
	id, ok := tuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Test.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := tuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, test.FieldID)
		for _, f := range fields {
			if !test.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != test.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tuo.mutation.TestType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: test.FieldTestType,
		})
	}
	if tuo.mutation.ModuleTestCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   test.ModuleTestTable,
			Columns: []string{test.ModuleTestColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: moduletest.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.RemovedModuleTestIDs(); len(nodes) > 0 && !tuo.mutation.ModuleTestCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   test.ModuleTestTable,
			Columns: []string{test.ModuleTestColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: moduletest.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.ModuleTestIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   test.ModuleTestTable,
			Columns: []string{test.ModuleTestColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: moduletest.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.SubmoduleTestCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   test.SubmoduleTestTable,
			Columns: []string{test.SubmoduleTestColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: submoduletest.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.RemovedSubmoduleTestIDs(); len(nodes) > 0 && !tuo.mutation.SubmoduleTestCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   test.SubmoduleTestTable,
			Columns: []string{test.SubmoduleTestColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: submoduletest.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.SubmoduleTestIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   test.SubmoduleTestTable,
			Columns: []string{test.SubmoduleTestColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: submoduletest.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.TherTestCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   test.TherTestTable,
			Columns: []string{test.TherTestColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: theoreticaltest.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.RemovedTherTestIDs(); len(nodes) > 0 && !tuo.mutation.TherTestCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   test.TherTestTable,
			Columns: []string{test.TherTestColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: theoreticaltest.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.TherTestIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   test.TherTestTable,
			Columns: []string{test.TherTestColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: theoreticaltest.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.PractTestCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   test.PractTestTable,
			Columns: []string{test.PractTestColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: practtest.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.RemovedPractTestIDs(); len(nodes) > 0 && !tuo.mutation.PractTestCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   test.PractTestTable,
			Columns: []string{test.PractTestColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: practtest.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.PractTestIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   test.PractTestTable,
			Columns: []string{test.PractTestColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: practtest.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Test{config: tuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{test.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
