// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/0B1t322/CP-Rosseti-Back/ent/module"
	"github.com/0B1t322/CP-Rosseti-Back/ent/submodule"
	"github.com/0B1t322/CP-Rosseti-Back/ent/submoduletest"
)

// SubModule is the model entity for the SubModule schema.
type SubModule struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Text holds the value of the "text" field.
	Text string `json:"text,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the SubModuleQuery when eager-loading is set.
	Edges              SubModuleEdges `json:"edges"`
	module_sub_modules *int
}

// SubModuleEdges holds the relations/edges for other nodes in the graph.
type SubModuleEdges struct {
	// Module holds the value of the Module edge.
	Module *Module `json:"Module,omitempty"`
	// Test holds the value of the Test edge.
	Test *SubModuleTest `json:"Test,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// ModuleOrErr returns the Module value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SubModuleEdges) ModuleOrErr() (*Module, error) {
	if e.loadedTypes[0] {
		if e.Module == nil {
			// The edge Module was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: module.Label}
		}
		return e.Module, nil
	}
	return nil, &NotLoadedError{edge: "Module"}
}

// TestOrErr returns the Test value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SubModuleEdges) TestOrErr() (*SubModuleTest, error) {
	if e.loadedTypes[1] {
		if e.Test == nil {
			// The edge Test was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: submoduletest.Label}
		}
		return e.Test, nil
	}
	return nil, &NotLoadedError{edge: "Test"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*SubModule) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case submodule.FieldID:
			values[i] = new(sql.NullInt64)
		case submodule.FieldName, submodule.FieldText:
			values[i] = new(sql.NullString)
		case submodule.ForeignKeys[0]: // module_sub_modules
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type SubModule", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the SubModule fields.
func (sm *SubModule) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case submodule.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			sm.ID = int(value.Int64)
		case submodule.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				sm.Name = value.String
			}
		case submodule.FieldText:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field text", values[i])
			} else if value.Valid {
				sm.Text = value.String
			}
		case submodule.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field module_sub_modules", value)
			} else if value.Valid {
				sm.module_sub_modules = new(int)
				*sm.module_sub_modules = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryModule queries the "Module" edge of the SubModule entity.
func (sm *SubModule) QueryModule() *ModuleQuery {
	return (&SubModuleClient{config: sm.config}).QueryModule(sm)
}

// QueryTest queries the "Test" edge of the SubModule entity.
func (sm *SubModule) QueryTest() *SubModuleTestQuery {
	return (&SubModuleClient{config: sm.config}).QueryTest(sm)
}

// Update returns a builder for updating this SubModule.
// Note that you need to call SubModule.Unwrap() before calling this method if this SubModule
// was returned from a transaction, and the transaction was committed or rolled back.
func (sm *SubModule) Update() *SubModuleUpdateOne {
	return (&SubModuleClient{config: sm.config}).UpdateOne(sm)
}

// Unwrap unwraps the SubModule entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (sm *SubModule) Unwrap() *SubModule {
	tx, ok := sm.config.driver.(*txDriver)
	if !ok {
		panic("ent: SubModule is not a transactional entity")
	}
	sm.config.driver = tx.drv
	return sm
}

// String implements the fmt.Stringer.
func (sm *SubModule) String() string {
	var builder strings.Builder
	builder.WriteString("SubModule(")
	builder.WriteString(fmt.Sprintf("id=%v", sm.ID))
	builder.WriteString(", name=")
	builder.WriteString(sm.Name)
	builder.WriteString(", text=")
	builder.WriteString(sm.Text)
	builder.WriteByte(')')
	return builder.String()
}

// SubModules is a parsable slice of SubModule.
type SubModules []*SubModule

func (sm SubModules) config(cfg config) {
	for _i := range sm {
		sm[_i].config = cfg
	}
}
