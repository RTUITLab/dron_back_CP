// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/0B1t322/CP-Rosseti-Back/ent/module"
	"github.com/0B1t322/CP-Rosseti-Back/ent/moduletest"
	"github.com/0B1t322/CP-Rosseti-Back/ent/predicate"
	"github.com/0B1t322/CP-Rosseti-Back/ent/test"
)

// ModuleTestUpdate is the builder for updating ModuleTest entities.
type ModuleTestUpdate struct {
	config
	hooks    []Hook
	mutation *ModuleTestMutation
}

// Where appends a list predicates to the ModuleTestUpdate builder.
func (mtu *ModuleTestUpdate) Where(ps ...predicate.ModuleTest) *ModuleTestUpdate {
	mtu.mutation.Where(ps...)
	return mtu
}

// SetModuleID sets the "module_id" field.
func (mtu *ModuleTestUpdate) SetModuleID(i int) *ModuleTestUpdate {
	mtu.mutation.SetModuleID(i)
	return mtu
}

// SetTestID sets the "test_id" field.
func (mtu *ModuleTestUpdate) SetTestID(i int) *ModuleTestUpdate {
	mtu.mutation.SetTestID(i)
	return mtu
}

// SetModule sets the "Module" edge to the Module entity.
func (mtu *ModuleTestUpdate) SetModule(m *Module) *ModuleTestUpdate {
	return mtu.SetModuleID(m.ID)
}

// SetTest sets the "Test" edge to the Test entity.
func (mtu *ModuleTestUpdate) SetTest(t *Test) *ModuleTestUpdate {
	return mtu.SetTestID(t.ID)
}

// Mutation returns the ModuleTestMutation object of the builder.
func (mtu *ModuleTestUpdate) Mutation() *ModuleTestMutation {
	return mtu.mutation
}

// ClearModule clears the "Module" edge to the Module entity.
func (mtu *ModuleTestUpdate) ClearModule() *ModuleTestUpdate {
	mtu.mutation.ClearModule()
	return mtu
}

// ClearTest clears the "Test" edge to the Test entity.
func (mtu *ModuleTestUpdate) ClearTest() *ModuleTestUpdate {
	mtu.mutation.ClearTest()
	return mtu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mtu *ModuleTestUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(mtu.hooks) == 0 {
		if err = mtu.check(); err != nil {
			return 0, err
		}
		affected, err = mtu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ModuleTestMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = mtu.check(); err != nil {
				return 0, err
			}
			mtu.mutation = mutation
			affected, err = mtu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(mtu.hooks) - 1; i >= 0; i-- {
			if mtu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = mtu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, mtu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (mtu *ModuleTestUpdate) SaveX(ctx context.Context) int {
	affected, err := mtu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mtu *ModuleTestUpdate) Exec(ctx context.Context) error {
	_, err := mtu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mtu *ModuleTestUpdate) ExecX(ctx context.Context) {
	if err := mtu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mtu *ModuleTestUpdate) check() error {
	if _, ok := mtu.mutation.ModuleID(); mtu.mutation.ModuleCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"Module\"")
	}
	if _, ok := mtu.mutation.TestID(); mtu.mutation.TestCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"Test\"")
	}
	return nil
}

func (mtu *ModuleTestUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   moduletest.Table,
			Columns: moduletest.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: moduletest.FieldID,
			},
		},
	}
	if ps := mtu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if mtu.mutation.ModuleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   moduletest.ModuleTable,
			Columns: []string{moduletest.ModuleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: module.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mtu.mutation.ModuleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   moduletest.ModuleTable,
			Columns: []string{moduletest.ModuleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: module.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mtu.mutation.TestCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   moduletest.TestTable,
			Columns: []string{moduletest.TestColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: test.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mtu.mutation.TestIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   moduletest.TestTable,
			Columns: []string{moduletest.TestColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: test.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, mtu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{moduletest.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// ModuleTestUpdateOne is the builder for updating a single ModuleTest entity.
type ModuleTestUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ModuleTestMutation
}

// SetModuleID sets the "module_id" field.
func (mtuo *ModuleTestUpdateOne) SetModuleID(i int) *ModuleTestUpdateOne {
	mtuo.mutation.SetModuleID(i)
	return mtuo
}

// SetTestID sets the "test_id" field.
func (mtuo *ModuleTestUpdateOne) SetTestID(i int) *ModuleTestUpdateOne {
	mtuo.mutation.SetTestID(i)
	return mtuo
}

// SetModule sets the "Module" edge to the Module entity.
func (mtuo *ModuleTestUpdateOne) SetModule(m *Module) *ModuleTestUpdateOne {
	return mtuo.SetModuleID(m.ID)
}

// SetTest sets the "Test" edge to the Test entity.
func (mtuo *ModuleTestUpdateOne) SetTest(t *Test) *ModuleTestUpdateOne {
	return mtuo.SetTestID(t.ID)
}

// Mutation returns the ModuleTestMutation object of the builder.
func (mtuo *ModuleTestUpdateOne) Mutation() *ModuleTestMutation {
	return mtuo.mutation
}

// ClearModule clears the "Module" edge to the Module entity.
func (mtuo *ModuleTestUpdateOne) ClearModule() *ModuleTestUpdateOne {
	mtuo.mutation.ClearModule()
	return mtuo
}

// ClearTest clears the "Test" edge to the Test entity.
func (mtuo *ModuleTestUpdateOne) ClearTest() *ModuleTestUpdateOne {
	mtuo.mutation.ClearTest()
	return mtuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (mtuo *ModuleTestUpdateOne) Select(field string, fields ...string) *ModuleTestUpdateOne {
	mtuo.fields = append([]string{field}, fields...)
	return mtuo
}

// Save executes the query and returns the updated ModuleTest entity.
func (mtuo *ModuleTestUpdateOne) Save(ctx context.Context) (*ModuleTest, error) {
	var (
		err  error
		node *ModuleTest
	)
	if len(mtuo.hooks) == 0 {
		if err = mtuo.check(); err != nil {
			return nil, err
		}
		node, err = mtuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ModuleTestMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = mtuo.check(); err != nil {
				return nil, err
			}
			mtuo.mutation = mutation
			node, err = mtuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(mtuo.hooks) - 1; i >= 0; i-- {
			if mtuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = mtuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, mtuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (mtuo *ModuleTestUpdateOne) SaveX(ctx context.Context) *ModuleTest {
	node, err := mtuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (mtuo *ModuleTestUpdateOne) Exec(ctx context.Context) error {
	_, err := mtuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mtuo *ModuleTestUpdateOne) ExecX(ctx context.Context) {
	if err := mtuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mtuo *ModuleTestUpdateOne) check() error {
	if _, ok := mtuo.mutation.ModuleID(); mtuo.mutation.ModuleCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"Module\"")
	}
	if _, ok := mtuo.mutation.TestID(); mtuo.mutation.TestCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"Test\"")
	}
	return nil
}

func (mtuo *ModuleTestUpdateOne) sqlSave(ctx context.Context) (_node *ModuleTest, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   moduletest.Table,
			Columns: moduletest.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: moduletest.FieldID,
			},
		},
	}
	id, ok := mtuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing ModuleTest.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := mtuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, moduletest.FieldID)
		for _, f := range fields {
			if !moduletest.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != moduletest.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := mtuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if mtuo.mutation.ModuleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   moduletest.ModuleTable,
			Columns: []string{moduletest.ModuleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: module.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mtuo.mutation.ModuleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   moduletest.ModuleTable,
			Columns: []string{moduletest.ModuleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: module.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mtuo.mutation.TestCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   moduletest.TestTable,
			Columns: []string{moduletest.TestColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: test.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mtuo.mutation.TestIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   moduletest.TestTable,
			Columns: []string{moduletest.TestColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: test.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ModuleTest{config: mtuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, mtuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{moduletest.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
