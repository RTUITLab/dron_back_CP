// Code generated by entc, DO NOT EDIT.

package submodule

const (
	// Label holds the string label denoting the submodule type in the database.
	Label = "sub_module"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldText holds the string denoting the text field in the database.
	FieldText = "text"
	// EdgeModule holds the string denoting the module edge name in mutations.
	EdgeModule = "Module"
	// EdgeTest holds the string denoting the test edge name in mutations.
	EdgeTest = "Test"
	// Table holds the table name of the submodule in the database.
	Table = "SubModule"
	// ModuleTable is the table that holds the Module relation/edge.
	ModuleTable = "SubModule"
	// ModuleInverseTable is the table name for the Module entity.
	// It exists in this package in order to avoid circular dependency with the "module" package.
	ModuleInverseTable = "Module"
	// ModuleColumn is the table column denoting the Module relation/edge.
	ModuleColumn = "module_sub_modules"
	// TestTable is the table that holds the Test relation/edge.
	TestTable = "SubModuleTest"
	// TestInverseTable is the table name for the SubModuleTest entity.
	// It exists in this package in order to avoid circular dependency with the "submoduletest" package.
	TestInverseTable = "SubModuleTest"
	// TestColumn is the table column denoting the Test relation/edge.
	TestColumn = "submodule_id"
)

// Columns holds all SQL columns for submodule fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldText,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "SubModule"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"module_sub_modules",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}
