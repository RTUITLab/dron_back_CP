// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/0B1t322/CP-Rosseti-Back/ent/module"
	"github.com/0B1t322/CP-Rosseti-Back/ent/moduledependcies"
	"github.com/0B1t322/CP-Rosseti-Back/ent/predicate"
)

// ModuleDependciesUpdate is the builder for updating ModuleDependcies entities.
type ModuleDependciesUpdate struct {
	config
	hooks    []Hook
	mutation *ModuleDependciesMutation
}

// Where appends a list predicates to the ModuleDependciesUpdate builder.
func (mdu *ModuleDependciesUpdate) Where(ps ...predicate.ModuleDependcies) *ModuleDependciesUpdate {
	mdu.mutation.Where(ps...)
	return mdu
}

// SetDependentID sets the "dependent_id" field.
func (mdu *ModuleDependciesUpdate) SetDependentID(i int) *ModuleDependciesUpdate {
	mdu.mutation.SetDependentID(i)
	return mdu
}

// SetDependentOnID sets the "dependent_on_id" field.
func (mdu *ModuleDependciesUpdate) SetDependentOnID(i int) *ModuleDependciesUpdate {
	mdu.mutation.SetDependentOnID(i)
	return mdu
}

// SetModuleDependciesID sets the "ModuleDependcies" edge to the Module entity by ID.
func (mdu *ModuleDependciesUpdate) SetModuleDependciesID(id int) *ModuleDependciesUpdate {
	mdu.mutation.SetModuleDependciesID(id)
	return mdu
}

// SetModuleDependcies sets the "ModuleDependcies" edge to the Module entity.
func (mdu *ModuleDependciesUpdate) SetModuleDependcies(m *Module) *ModuleDependciesUpdate {
	return mdu.SetModuleDependciesID(m.ID)
}

// SetModuleDependOnID sets the "ModuleDependOn" edge to the Module entity by ID.
func (mdu *ModuleDependciesUpdate) SetModuleDependOnID(id int) *ModuleDependciesUpdate {
	mdu.mutation.SetModuleDependOnID(id)
	return mdu
}

// SetModuleDependOn sets the "ModuleDependOn" edge to the Module entity.
func (mdu *ModuleDependciesUpdate) SetModuleDependOn(m *Module) *ModuleDependciesUpdate {
	return mdu.SetModuleDependOnID(m.ID)
}

// Mutation returns the ModuleDependciesMutation object of the builder.
func (mdu *ModuleDependciesUpdate) Mutation() *ModuleDependciesMutation {
	return mdu.mutation
}

// ClearModuleDependcies clears the "ModuleDependcies" edge to the Module entity.
func (mdu *ModuleDependciesUpdate) ClearModuleDependcies() *ModuleDependciesUpdate {
	mdu.mutation.ClearModuleDependcies()
	return mdu
}

// ClearModuleDependOn clears the "ModuleDependOn" edge to the Module entity.
func (mdu *ModuleDependciesUpdate) ClearModuleDependOn() *ModuleDependciesUpdate {
	mdu.mutation.ClearModuleDependOn()
	return mdu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mdu *ModuleDependciesUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(mdu.hooks) == 0 {
		if err = mdu.check(); err != nil {
			return 0, err
		}
		affected, err = mdu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ModuleDependciesMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = mdu.check(); err != nil {
				return 0, err
			}
			mdu.mutation = mutation
			affected, err = mdu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(mdu.hooks) - 1; i >= 0; i-- {
			if mdu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = mdu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, mdu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (mdu *ModuleDependciesUpdate) SaveX(ctx context.Context) int {
	affected, err := mdu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mdu *ModuleDependciesUpdate) Exec(ctx context.Context) error {
	_, err := mdu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mdu *ModuleDependciesUpdate) ExecX(ctx context.Context) {
	if err := mdu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mdu *ModuleDependciesUpdate) check() error {
	if _, ok := mdu.mutation.ModuleDependciesID(); mdu.mutation.ModuleDependciesCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"ModuleDependcies\"")
	}
	if _, ok := mdu.mutation.ModuleDependOnID(); mdu.mutation.ModuleDependOnCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"ModuleDependOn\"")
	}
	return nil
}

func (mdu *ModuleDependciesUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   moduledependcies.Table,
			Columns: moduledependcies.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: moduledependcies.FieldID,
			},
		},
	}
	if ps := mdu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if mdu.mutation.ModuleDependciesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   moduledependcies.ModuleDependciesTable,
			Columns: []string{moduledependcies.ModuleDependciesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: module.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mdu.mutation.ModuleDependciesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   moduledependcies.ModuleDependciesTable,
			Columns: []string{moduledependcies.ModuleDependciesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: module.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mdu.mutation.ModuleDependOnCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   moduledependcies.ModuleDependOnTable,
			Columns: []string{moduledependcies.ModuleDependOnColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: module.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mdu.mutation.ModuleDependOnIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   moduledependcies.ModuleDependOnTable,
			Columns: []string{moduledependcies.ModuleDependOnColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: module.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, mdu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{moduledependcies.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// ModuleDependciesUpdateOne is the builder for updating a single ModuleDependcies entity.
type ModuleDependciesUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ModuleDependciesMutation
}

// SetDependentID sets the "dependent_id" field.
func (mduo *ModuleDependciesUpdateOne) SetDependentID(i int) *ModuleDependciesUpdateOne {
	mduo.mutation.SetDependentID(i)
	return mduo
}

// SetDependentOnID sets the "dependent_on_id" field.
func (mduo *ModuleDependciesUpdateOne) SetDependentOnID(i int) *ModuleDependciesUpdateOne {
	mduo.mutation.SetDependentOnID(i)
	return mduo
}

// SetModuleDependciesID sets the "ModuleDependcies" edge to the Module entity by ID.
func (mduo *ModuleDependciesUpdateOne) SetModuleDependciesID(id int) *ModuleDependciesUpdateOne {
	mduo.mutation.SetModuleDependciesID(id)
	return mduo
}

// SetModuleDependcies sets the "ModuleDependcies" edge to the Module entity.
func (mduo *ModuleDependciesUpdateOne) SetModuleDependcies(m *Module) *ModuleDependciesUpdateOne {
	return mduo.SetModuleDependciesID(m.ID)
}

// SetModuleDependOnID sets the "ModuleDependOn" edge to the Module entity by ID.
func (mduo *ModuleDependciesUpdateOne) SetModuleDependOnID(id int) *ModuleDependciesUpdateOne {
	mduo.mutation.SetModuleDependOnID(id)
	return mduo
}

// SetModuleDependOn sets the "ModuleDependOn" edge to the Module entity.
func (mduo *ModuleDependciesUpdateOne) SetModuleDependOn(m *Module) *ModuleDependciesUpdateOne {
	return mduo.SetModuleDependOnID(m.ID)
}

// Mutation returns the ModuleDependciesMutation object of the builder.
func (mduo *ModuleDependciesUpdateOne) Mutation() *ModuleDependciesMutation {
	return mduo.mutation
}

// ClearModuleDependcies clears the "ModuleDependcies" edge to the Module entity.
func (mduo *ModuleDependciesUpdateOne) ClearModuleDependcies() *ModuleDependciesUpdateOne {
	mduo.mutation.ClearModuleDependcies()
	return mduo
}

// ClearModuleDependOn clears the "ModuleDependOn" edge to the Module entity.
func (mduo *ModuleDependciesUpdateOne) ClearModuleDependOn() *ModuleDependciesUpdateOne {
	mduo.mutation.ClearModuleDependOn()
	return mduo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (mduo *ModuleDependciesUpdateOne) Select(field string, fields ...string) *ModuleDependciesUpdateOne {
	mduo.fields = append([]string{field}, fields...)
	return mduo
}

// Save executes the query and returns the updated ModuleDependcies entity.
func (mduo *ModuleDependciesUpdateOne) Save(ctx context.Context) (*ModuleDependcies, error) {
	var (
		err  error
		node *ModuleDependcies
	)
	if len(mduo.hooks) == 0 {
		if err = mduo.check(); err != nil {
			return nil, err
		}
		node, err = mduo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ModuleDependciesMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = mduo.check(); err != nil {
				return nil, err
			}
			mduo.mutation = mutation
			node, err = mduo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(mduo.hooks) - 1; i >= 0; i-- {
			if mduo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = mduo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, mduo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (mduo *ModuleDependciesUpdateOne) SaveX(ctx context.Context) *ModuleDependcies {
	node, err := mduo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (mduo *ModuleDependciesUpdateOne) Exec(ctx context.Context) error {
	_, err := mduo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mduo *ModuleDependciesUpdateOne) ExecX(ctx context.Context) {
	if err := mduo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mduo *ModuleDependciesUpdateOne) check() error {
	if _, ok := mduo.mutation.ModuleDependciesID(); mduo.mutation.ModuleDependciesCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"ModuleDependcies\"")
	}
	if _, ok := mduo.mutation.ModuleDependOnID(); mduo.mutation.ModuleDependOnCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"ModuleDependOn\"")
	}
	return nil
}

func (mduo *ModuleDependciesUpdateOne) sqlSave(ctx context.Context) (_node *ModuleDependcies, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   moduledependcies.Table,
			Columns: moduledependcies.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: moduledependcies.FieldID,
			},
		},
	}
	id, ok := mduo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing ModuleDependcies.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := mduo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, moduledependcies.FieldID)
		for _, f := range fields {
			if !moduledependcies.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != moduledependcies.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := mduo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if mduo.mutation.ModuleDependciesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   moduledependcies.ModuleDependciesTable,
			Columns: []string{moduledependcies.ModuleDependciesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: module.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mduo.mutation.ModuleDependciesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   moduledependcies.ModuleDependciesTable,
			Columns: []string{moduledependcies.ModuleDependciesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: module.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mduo.mutation.ModuleDependOnCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   moduledependcies.ModuleDependOnTable,
			Columns: []string{moduledependcies.ModuleDependOnColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: module.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mduo.mutation.ModuleDependOnIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   moduledependcies.ModuleDependOnTable,
			Columns: []string{moduledependcies.ModuleDependOnColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: module.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ModuleDependcies{config: mduo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, mduo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{moduledependcies.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
