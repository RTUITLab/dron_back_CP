// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/0B1t322/CP-Rosseti-Back/ent/predicate"
	"github.com/0B1t322/CP-Rosseti-Back/ent/question"
	"github.com/0B1t322/CP-Rosseti-Back/ent/theoreticaltry"
	"github.com/0B1t322/CP-Rosseti-Back/ent/tryanswer"
)

// TryAnswerUpdate is the builder for updating TryAnswer entities.
type TryAnswerUpdate struct {
	config
	hooks    []Hook
	mutation *TryAnswerMutation
}

// Where appends a list predicates to the TryAnswerUpdate builder.
func (tau *TryAnswerUpdate) Where(ps ...predicate.TryAnswer) *TryAnswerUpdate {
	tau.mutation.Where(ps...)
	return tau
}

// SetTryID sets the "try_id" field.
func (tau *TryAnswerUpdate) SetTryID(i int) *TryAnswerUpdate {
	tau.mutation.SetTryID(i)
	return tau
}

// SetQuestionID sets the "question_id" field.
func (tau *TryAnswerUpdate) SetQuestionID(i int) *TryAnswerUpdate {
	tau.mutation.SetQuestionID(i)
	return tau
}

// SetAsnwer sets the "asnwer" field.
func (tau *TryAnswerUpdate) SetAsnwer(s string) *TryAnswerUpdate {
	tau.mutation.SetAsnwer(s)
	return tau
}

// SetCorrect sets the "correct" field.
func (tau *TryAnswerUpdate) SetCorrect(b bool) *TryAnswerUpdate {
	tau.mutation.SetCorrect(b)
	return tau
}

// SetNillableCorrect sets the "correct" field if the given value is not nil.
func (tau *TryAnswerUpdate) SetNillableCorrect(b *bool) *TryAnswerUpdate {
	if b != nil {
		tau.SetCorrect(*b)
	}
	return tau
}

// ClearCorrect clears the value of the "correct" field.
func (tau *TryAnswerUpdate) ClearCorrect() *TryAnswerUpdate {
	tau.mutation.ClearCorrect()
	return tau
}

// SetTheoreticalTryID sets the "TheoreticalTry" edge to the TheoreticalTry entity by ID.
func (tau *TryAnswerUpdate) SetTheoreticalTryID(id int) *TryAnswerUpdate {
	tau.mutation.SetTheoreticalTryID(id)
	return tau
}

// SetTheoreticalTry sets the "TheoreticalTry" edge to the TheoreticalTry entity.
func (tau *TryAnswerUpdate) SetTheoreticalTry(t *TheoreticalTry) *TryAnswerUpdate {
	return tau.SetTheoreticalTryID(t.ID)
}

// SetQuestion sets the "Question" edge to the Question entity.
func (tau *TryAnswerUpdate) SetQuestion(q *Question) *TryAnswerUpdate {
	return tau.SetQuestionID(q.ID)
}

// Mutation returns the TryAnswerMutation object of the builder.
func (tau *TryAnswerUpdate) Mutation() *TryAnswerMutation {
	return tau.mutation
}

// ClearTheoreticalTry clears the "TheoreticalTry" edge to the TheoreticalTry entity.
func (tau *TryAnswerUpdate) ClearTheoreticalTry() *TryAnswerUpdate {
	tau.mutation.ClearTheoreticalTry()
	return tau
}

// ClearQuestion clears the "Question" edge to the Question entity.
func (tau *TryAnswerUpdate) ClearQuestion() *TryAnswerUpdate {
	tau.mutation.ClearQuestion()
	return tau
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tau *TryAnswerUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(tau.hooks) == 0 {
		if err = tau.check(); err != nil {
			return 0, err
		}
		affected, err = tau.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TryAnswerMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = tau.check(); err != nil {
				return 0, err
			}
			tau.mutation = mutation
			affected, err = tau.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(tau.hooks) - 1; i >= 0; i-- {
			if tau.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = tau.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tau.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (tau *TryAnswerUpdate) SaveX(ctx context.Context) int {
	affected, err := tau.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tau *TryAnswerUpdate) Exec(ctx context.Context) error {
	_, err := tau.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tau *TryAnswerUpdate) ExecX(ctx context.Context) {
	if err := tau.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tau *TryAnswerUpdate) check() error {
	if _, ok := tau.mutation.TheoreticalTryID(); tau.mutation.TheoreticalTryCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"TheoreticalTry\"")
	}
	if _, ok := tau.mutation.QuestionID(); tau.mutation.QuestionCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"Question\"")
	}
	return nil
}

func (tau *TryAnswerUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   tryanswer.Table,
			Columns: tryanswer.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: tryanswer.FieldID,
			},
		},
	}
	if ps := tau.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tau.mutation.Asnwer(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tryanswer.FieldAsnwer,
		})
	}
	if value, ok := tau.mutation.Correct(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: tryanswer.FieldCorrect,
		})
	}
	if tau.mutation.CorrectCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Column: tryanswer.FieldCorrect,
		})
	}
	if tau.mutation.TheoreticalTryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tryanswer.TheoreticalTryTable,
			Columns: []string{tryanswer.TheoreticalTryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: theoreticaltry.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tau.mutation.TheoreticalTryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tryanswer.TheoreticalTryTable,
			Columns: []string{tryanswer.TheoreticalTryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: theoreticaltry.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tau.mutation.QuestionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tryanswer.QuestionTable,
			Columns: []string{tryanswer.QuestionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: question.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tau.mutation.QuestionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tryanswer.QuestionTable,
			Columns: []string{tryanswer.QuestionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: question.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tau.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tryanswer.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// TryAnswerUpdateOne is the builder for updating a single TryAnswer entity.
type TryAnswerUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TryAnswerMutation
}

// SetTryID sets the "try_id" field.
func (tauo *TryAnswerUpdateOne) SetTryID(i int) *TryAnswerUpdateOne {
	tauo.mutation.SetTryID(i)
	return tauo
}

// SetQuestionID sets the "question_id" field.
func (tauo *TryAnswerUpdateOne) SetQuestionID(i int) *TryAnswerUpdateOne {
	tauo.mutation.SetQuestionID(i)
	return tauo
}

// SetAsnwer sets the "asnwer" field.
func (tauo *TryAnswerUpdateOne) SetAsnwer(s string) *TryAnswerUpdateOne {
	tauo.mutation.SetAsnwer(s)
	return tauo
}

// SetCorrect sets the "correct" field.
func (tauo *TryAnswerUpdateOne) SetCorrect(b bool) *TryAnswerUpdateOne {
	tauo.mutation.SetCorrect(b)
	return tauo
}

// SetNillableCorrect sets the "correct" field if the given value is not nil.
func (tauo *TryAnswerUpdateOne) SetNillableCorrect(b *bool) *TryAnswerUpdateOne {
	if b != nil {
		tauo.SetCorrect(*b)
	}
	return tauo
}

// ClearCorrect clears the value of the "correct" field.
func (tauo *TryAnswerUpdateOne) ClearCorrect() *TryAnswerUpdateOne {
	tauo.mutation.ClearCorrect()
	return tauo
}

// SetTheoreticalTryID sets the "TheoreticalTry" edge to the TheoreticalTry entity by ID.
func (tauo *TryAnswerUpdateOne) SetTheoreticalTryID(id int) *TryAnswerUpdateOne {
	tauo.mutation.SetTheoreticalTryID(id)
	return tauo
}

// SetTheoreticalTry sets the "TheoreticalTry" edge to the TheoreticalTry entity.
func (tauo *TryAnswerUpdateOne) SetTheoreticalTry(t *TheoreticalTry) *TryAnswerUpdateOne {
	return tauo.SetTheoreticalTryID(t.ID)
}

// SetQuestion sets the "Question" edge to the Question entity.
func (tauo *TryAnswerUpdateOne) SetQuestion(q *Question) *TryAnswerUpdateOne {
	return tauo.SetQuestionID(q.ID)
}

// Mutation returns the TryAnswerMutation object of the builder.
func (tauo *TryAnswerUpdateOne) Mutation() *TryAnswerMutation {
	return tauo.mutation
}

// ClearTheoreticalTry clears the "TheoreticalTry" edge to the TheoreticalTry entity.
func (tauo *TryAnswerUpdateOne) ClearTheoreticalTry() *TryAnswerUpdateOne {
	tauo.mutation.ClearTheoreticalTry()
	return tauo
}

// ClearQuestion clears the "Question" edge to the Question entity.
func (tauo *TryAnswerUpdateOne) ClearQuestion() *TryAnswerUpdateOne {
	tauo.mutation.ClearQuestion()
	return tauo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tauo *TryAnswerUpdateOne) Select(field string, fields ...string) *TryAnswerUpdateOne {
	tauo.fields = append([]string{field}, fields...)
	return tauo
}

// Save executes the query and returns the updated TryAnswer entity.
func (tauo *TryAnswerUpdateOne) Save(ctx context.Context) (*TryAnswer, error) {
	var (
		err  error
		node *TryAnswer
	)
	if len(tauo.hooks) == 0 {
		if err = tauo.check(); err != nil {
			return nil, err
		}
		node, err = tauo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TryAnswerMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = tauo.check(); err != nil {
				return nil, err
			}
			tauo.mutation = mutation
			node, err = tauo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(tauo.hooks) - 1; i >= 0; i-- {
			if tauo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = tauo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tauo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (tauo *TryAnswerUpdateOne) SaveX(ctx context.Context) *TryAnswer {
	node, err := tauo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tauo *TryAnswerUpdateOne) Exec(ctx context.Context) error {
	_, err := tauo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tauo *TryAnswerUpdateOne) ExecX(ctx context.Context) {
	if err := tauo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tauo *TryAnswerUpdateOne) check() error {
	if _, ok := tauo.mutation.TheoreticalTryID(); tauo.mutation.TheoreticalTryCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"TheoreticalTry\"")
	}
	if _, ok := tauo.mutation.QuestionID(); tauo.mutation.QuestionCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"Question\"")
	}
	return nil
}

func (tauo *TryAnswerUpdateOne) sqlSave(ctx context.Context) (_node *TryAnswer, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   tryanswer.Table,
			Columns: tryanswer.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: tryanswer.FieldID,
			},
		},
	}
	id, ok := tauo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing TryAnswer.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := tauo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, tryanswer.FieldID)
		for _, f := range fields {
			if !tryanswer.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != tryanswer.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tauo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tauo.mutation.Asnwer(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tryanswer.FieldAsnwer,
		})
	}
	if value, ok := tauo.mutation.Correct(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: tryanswer.FieldCorrect,
		})
	}
	if tauo.mutation.CorrectCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Column: tryanswer.FieldCorrect,
		})
	}
	if tauo.mutation.TheoreticalTryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tryanswer.TheoreticalTryTable,
			Columns: []string{tryanswer.TheoreticalTryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: theoreticaltry.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tauo.mutation.TheoreticalTryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tryanswer.TheoreticalTryTable,
			Columns: []string{tryanswer.TheoreticalTryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: theoreticaltry.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tauo.mutation.QuestionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tryanswer.QuestionTable,
			Columns: []string{tryanswer.QuestionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: question.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tauo.mutation.QuestionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tryanswer.QuestionTable,
			Columns: []string{tryanswer.QuestionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: question.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &TryAnswer{config: tauo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tauo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tryanswer.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
