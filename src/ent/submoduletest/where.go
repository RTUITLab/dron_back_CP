// Code generated by entc, DO NOT EDIT.

package submoduletest

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/0B1t322/CP-Rosseti-Back/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.SubModuleTest {
	return predicate.SubModuleTest(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.SubModuleTest {
	return predicate.SubModuleTest(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.SubModuleTest {
	return predicate.SubModuleTest(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.SubModuleTest {
	return predicate.SubModuleTest(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.SubModuleTest {
	return predicate.SubModuleTest(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.SubModuleTest {
	return predicate.SubModuleTest(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.SubModuleTest {
	return predicate.SubModuleTest(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.SubModuleTest {
	return predicate.SubModuleTest(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.SubModuleTest {
	return predicate.SubModuleTest(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// SubmoduleID applies equality check predicate on the "submodule_id" field. It's identical to SubmoduleIDEQ.
func SubmoduleID(v int) predicate.SubModuleTest {
	return predicate.SubModuleTest(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSubmoduleID), v))
	})
}

// SubmoduleIDEQ applies the EQ predicate on the "submodule_id" field.
func SubmoduleIDEQ(v int) predicate.SubModuleTest {
	return predicate.SubModuleTest(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSubmoduleID), v))
	})
}

// SubmoduleIDNEQ applies the NEQ predicate on the "submodule_id" field.
func SubmoduleIDNEQ(v int) predicate.SubModuleTest {
	return predicate.SubModuleTest(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSubmoduleID), v))
	})
}

// SubmoduleIDIn applies the In predicate on the "submodule_id" field.
func SubmoduleIDIn(vs ...int) predicate.SubModuleTest {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SubModuleTest(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSubmoduleID), v...))
	})
}

// SubmoduleIDNotIn applies the NotIn predicate on the "submodule_id" field.
func SubmoduleIDNotIn(vs ...int) predicate.SubModuleTest {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SubModuleTest(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSubmoduleID), v...))
	})
}

// HasSubModule applies the HasEdge predicate on the "SubModule" edge.
func HasSubModule() predicate.SubModuleTest {
	return predicate.SubModuleTest(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(SubModuleTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, SubModuleTable, SubModuleColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSubModuleWith applies the HasEdge predicate on the "SubModule" edge with a given conditions (other predicates).
func HasSubModuleWith(preds ...predicate.SubModule) predicate.SubModuleTest {
	return predicate.SubModuleTest(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(SubModuleInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, SubModuleTable, SubModuleColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTherTest applies the HasEdge predicate on the "TherTest" edge.
func HasTherTest() predicate.SubModuleTest {
	return predicate.SubModuleTest(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(TherTestTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, TherTestTable, TherTestColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTherTestWith applies the HasEdge predicate on the "TherTest" edge with a given conditions (other predicates).
func HasTherTestWith(preds ...predicate.TheoreticalTest) predicate.SubModuleTest {
	return predicate.SubModuleTest(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(TherTestInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, TherTestTable, TherTestColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPractTest applies the HasEdge predicate on the "PractTest" edge.
func HasPractTest() predicate.SubModuleTest {
	return predicate.SubModuleTest(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(PractTestTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, PractTestTable, PractTestColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPractTestWith applies the HasEdge predicate on the "PractTest" edge with a given conditions (other predicates).
func HasPractTestWith(preds ...predicate.PractTest) predicate.SubModuleTest {
	return predicate.SubModuleTest(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(PractTestInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, PractTestTable, PractTestColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.SubModuleTest) predicate.SubModuleTest {
	return predicate.SubModuleTest(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.SubModuleTest) predicate.SubModuleTest {
	return predicate.SubModuleTest(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.SubModuleTest) predicate.SubModuleTest {
	return predicate.SubModuleTest(func(s *sql.Selector) {
		p(s.Not())
	})
}
