basePath: /api/dron
definitions:
  auth.LoginReq:
    properties:
      login:
        type: string
      password:
        type: string
    type: object
  auth.LoginResp:
    properties:
      accesstoken:
        type: string
      refreshToken:
        type: string
    type: object
  auth.RefreshReq:
    properties:
      refreshToken:
        type: string
    type: object
  err.Error:
    properties:
      error:
        type: string
    type: object
  module.AddAnswerResp:
    properties:
      answer:
        type: string
      correct:
        type: boolean
      id:
        type: integer
    type: object
  module.AddModuleAnswerResp:
    properties:
      answer:
        type: string
      correct:
        type: boolean
      id:
        type: integer
    type: object
  module.AddModuleDependecyReq:
    properties:
      depenOn:
        type: integer
    type: object
  module.AddModulePractTestResp:
    properties:
      config:
        additionalProperties: true
        type: object
      duration:
        type: integer
      id:
        type: integer
    type: object
  module.AddModuleQuestionResp:
    properties:
      answers:
        items:
          $ref: '#/definitions/module.AddModuleAnswerResp'
        type: array
      id:
        type: integer
      question:
        type: string
    type: object
  module.AddModuleTestReq:
    properties:
      practTest:
        $ref: '#/definitions/module.CreateModulePractTestReq'
      theoreticalTest:
        $ref: '#/definitions/module.CreateModuleTheoreticalTestReq'
    type: object
  module.AddModuleTestResp:
    properties:
      id:
        type: integer
      practTest:
        $ref: '#/definitions/module.AddModulePractTestResp'
      theoreticalTest:
        $ref: '#/definitions/module.AddModuleTheorTestResp'
    type: object
  module.AddModuleTheorTestResp:
    properties:
      duration:
        type: integer
      questions:
        items:
          $ref: '#/definitions/module.AddModuleQuestionResp'
        type: array
    type: object
  module.AddPractTestReq:
    properties:
      config:
        additionalProperties: true
        type: object
    type: object
  module.AddPractTestResp:
    properties:
      config:
        additionalProperties: true
        type: object
      id:
        type: integer
    type: object
  module.AddQuestionResp:
    properties:
      answers:
        items:
          $ref: '#/definitions/module.AddAnswerResp'
        type: array
      id:
        type: integer
      question:
        type: string
    type: object
  module.AddSubModuleReq:
    properties:
      name:
        type: string
      text:
        type: string
    type: object
  module.AddSubModuleResp:
    properties:
      id:
        type: integer
      moduleID:
        type: integer
      name:
        type: string
      text:
        type: string
    type: object
  module.AddSubModuleTestReq:
    properties:
      practTest:
        $ref: '#/definitions/module.CreatePractTestReq'
      theoreticalTest:
        $ref: '#/definitions/module.CreateTheoreticalTestReq'
    type: object
  module.AddSubModuleTestResp:
    properties:
      id:
        type: integer
      practTest:
        $ref: '#/definitions/module.AddPractTestResp'
      theoreticalTest:
        $ref: '#/definitions/module.AddTheoreticalTestResp'
    type: object
  module.AddTheorTestReq:
    properties:
      questions:
        items:
          $ref: '#/definitions/module.CreateQuestionReq'
        type: array
    type: object
  module.AddTheorTestResp:
    properties:
      questions:
        items:
          $ref: '#/definitions/module.AddQuestionResp'
        type: array
    type: object
  module.AddTheoreticalTestResp:
    properties:
      questions:
        items:
          $ref: '#/definitions/module.AddQuestionResp'
        type: array
    type: object
  module.CreateAnswerReq:
    properties:
      answer:
        type: string
      correct:
        type: boolean
    type: object
  module.CreateModuleAnswerReq:
    properties:
      answer:
        type: string
      correct:
        type: boolean
    type: object
  module.CreateModulePractTestReq:
    properties:
      config:
        additionalProperties: true
        type: object
      duration:
        type: integer
    type: object
  module.CreateModuleQuestionReq:
    properties:
      answers:
        items:
          $ref: '#/definitions/module.CreateModuleAnswerReq'
        type: array
      question:
        type: string
    type: object
  module.CreateModuleReq:
    properties:
      name:
        type: string
    type: object
  module.CreateModuleResp:
    properties:
      id:
        type: integer
      name:
        type: string
    type: object
  module.CreateModuleTheoreticalTestReq:
    properties:
      duration:
        type: integer
      questions:
        items:
          $ref: '#/definitions/module.CreateModuleQuestionReq'
        type: array
    type: object
  module.CreatePractTestReq:
    properties:
      config:
        additionalProperties: true
        type: object
    type: object
  module.CreateQuestionReq:
    properties:
      answers:
        items:
          $ref: '#/definitions/module.CreateAnswerReq'
        type: array
      question:
        type: string
    type: object
  module.CreateTheoreticalTestReq:
    properties:
      questions:
        items:
          $ref: '#/definitions/module.CreateQuestionReq'
        type: array
    type: object
  module.GetModuleResp:
    properties:
      dependOn:
        items:
          type: integer
        type: array
      id:
        type: integer
      name:
        type: string
      subModules:
        items:
          $ref: '#/definitions/module.AddSubModuleResp'
        type: array
      tests:
        $ref: '#/definitions/module.AddModuleTestResp'
    type: object
  module.GetModulesResp:
    properties:
      modules:
        items:
          $ref: '#/definitions/module.GetModuleResp'
        type: array
    type: object
  module.GetSubModuleResp:
    properties:
      id:
        type: integer
      moduleID:
        type: integer
      name:
        type: string
      test:
        $ref: '#/definitions/module.AddSubModuleTestResp'
      text:
        type: string
    type: object
  module.TryAnswerQuestionReq:
    properties:
      answer:
        type: string
      qustionId:
        type: integer
    type: object
  module.TryTheoreticalTestQuestuions:
    properties:
      answers:
        items:
          type: string
        type: array
      id:
        type: integer
      text:
        type: string
    type: object
  module.TryTheoreticalTestReq:
    type: object
  module.TryTheoreticalTestResp:
    properties:
      questions:
        items:
          $ref: '#/definitions/module.TryTheoreticalTestQuestuions'
        type: array
      try_id:
        type: integer
    type: object
  module.UpdateAnswersReq:
    properties:
      answer:
        type: string
      correct:
        type: boolean
      id:
        type: integer
    type: object
  module.UpdateConfigReq:
    properties:
      config:
        additionalProperties: true
        type: object
    type: object
  module.UpdateModuleAnswersReq:
    properties:
      answer:
        type: string
      correct:
        type: boolean
      id:
        type: integer
    type: object
  module.UpdateModuleConfigReq:
    properties:
      config:
        additionalProperties: true
        type: object
      duration:
        type: integer
    type: object
  module.UpdateModuleQuestionReq:
    properties:
      answers:
        items:
          $ref: '#/definitions/module.UpdateModuleAnswersReq'
        type: array
      id:
        type: integer
      newAnswers:
        items:
          $ref: '#/definitions/module.CreateModuleAnswerReq'
        type: array
      question:
        type: string
    type: object
  module.UpdateModuleTheorTestReq:
    properties:
      duration:
        type: integer
      newQuestions:
        items:
          $ref: '#/definitions/module.CreateModuleQuestionReq'
        type: array
      questions:
        items:
          $ref: '#/definitions/module.UpdateModuleQuestionReq'
        type: array
    type: object
  module.UpdateQuestionReq:
    properties:
      answers:
        items:
          $ref: '#/definitions/module.UpdateAnswersReq'
        type: array
      id:
        type: integer
      newAnswers:
        items:
          $ref: '#/definitions/module.CreateAnswerReq'
        type: array
      question:
        type: string
    type: object
  module.UpdateTheorTestReq:
    properties:
      newQuestions:
        items:
          $ref: '#/definitions/module.CreateQuestionReq'
        type: array
      questions:
        items:
          $ref: '#/definitions/module.UpdateQuestionReq'
        type: array
    type: object
  user.CreateUserReq:
    properties:
      login:
        type: string
      password:
        type: string
      role:
        enum:
        - student
        - teacher
        - admin
        type: string
    type: object
  user.CreateUserResp:
    properties:
      int:
        type: integer
      login:
        type: string
      role:
        type: string
    type: object
  user.GetUserResponce:
    properties:
      id:
        type: integer
      login:
        type: string
      role:
        type: string
    type: object
  user.GetUsersResponce:
    properties:
      users:
        items:
          $ref: '#/definitions/user.GetUserResponce'
        type: array
    type: object
info:
  contact: {}
  description: This is a server to get projects from github
  title: ROSSETI-DRON API
  version: "1.0"
paths:
  /v1/auth/login:
    post:
      consumes:
      - application/json
      description: login
      parameters:
      - description: user info
        in: body
        name: userInfo
        required: true
        schema:
          $ref: '#/definitions/auth.LoginReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/auth.LoginResp'
        "400":
          description: some user error
          schema:
            $ref: '#/definitions/err.Error'
        "401":
          description: not auth
          schema:
            $ref: '#/definitions/err.Error'
        "500":
          description: internal
          schema:
            $ref: '#/definitions/err.Error'
      summary: login
      tags:
      - auth
  /v1/auth/refresh:
    post:
      consumes:
      - application/json
      description: refresh
      parameters:
      - description: token
        in: body
        name: token
        required: true
        schema:
          $ref: '#/definitions/auth.RefreshReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/auth.LoginResp'
        "400":
          description: some user error
          schema:
            $ref: '#/definitions/err.Error'
        "401":
          description: not auth
          schema:
            $ref: '#/definitions/err.Error'
        "500":
          description: internal
          schema:
            $ref: '#/definitions/err.Error'
      summary: refresh
      tags:
      - auth
  /v1/module:
    get:
      description: get modules
      parameters:
      - description: name filter
        in: query
        name: namemMatch
        type: string
      - description: name filter
        in: query
        name: offset
        type: integer
      - description: name filter
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/module.GetModulesResp'
        "401":
          description: not auth
          schema:
            $ref: '#/definitions/err.Error'
        "500":
          description: internal
          schema:
            $ref: '#/definitions/err.Error'
      security:
      - ApiKeyAuth: []
      summary: get modules
      tags:
      - module
    post:
      consumes:
      - application/json
      description: |-
        create module
        that can do only admin
      parameters:
      - description: Module info
        in: body
        name: module
        required: true
        schema:
          $ref: '#/definitions/module.CreateModuleReq'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/module.CreateModuleResp'
        "400":
          description: some user error
          schema:
            $ref: '#/definitions/err.Error'
        "401":
          description: not auth
          schema:
            $ref: '#/definitions/err.Error'
        "500":
          description: internal
          schema:
            $ref: '#/definitions/err.Error'
      security:
      - ApiKeyAuth: []
      summary: create module
      tags:
      - module
  /v1/module/{id}:
    get:
      description: get  module
      parameters:
      - description: id of module
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/module.GetModuleResp'
        "400":
          description: some user error
          schema:
            $ref: '#/definitions/err.Error'
        "401":
          description: not auth
          schema:
            $ref: '#/definitions/err.Error'
        "404":
          description: module not found
          schema:
            $ref: '#/definitions/err.Error'
        "500":
          description: internal
          schema:
            $ref: '#/definitions/err.Error'
      security:
      - ApiKeyAuth: []
      summary: get  module
      tags:
      - module
  /v1/module/{id}/dependecy:
    delete:
      consumes:
      - application/json
      description: Delete module dependecy
      parameters:
      - description: id of module
        in: path
        name: id
        required: true
        type: integer
      - description: body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/module.AddModuleDependecyReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/module.GetModuleResp'
        "400":
          description: some user error
          schema:
            $ref: '#/definitions/err.Error'
        "401":
          description: not auth
          schema:
            $ref: '#/definitions/err.Error'
        "404":
          description: module not found
          schema:
            $ref: '#/definitions/err.Error'
        "500":
          description: internal
          schema:
            $ref: '#/definitions/err.Error'
      security:
      - ApiKeyAuth: []
      summary: Delete module dependecy
      tags:
      - module
    put:
      consumes:
      - application/json
      description: Add module dependecy
      parameters:
      - description: id of module
        in: path
        name: id
        required: true
        type: integer
      - description: body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/module.AddModuleDependecyReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/module.GetModuleResp'
        "400":
          description: some user error
          schema:
            $ref: '#/definitions/err.Error'
        "401":
          description: not auth
          schema:
            $ref: '#/definitions/err.Error'
        "404":
          description: module not found
          schema:
            $ref: '#/definitions/err.Error'
        "500":
          description: internal
          schema:
            $ref: '#/definitions/err.Error'
      security:
      - ApiKeyAuth: []
      summary: add module dependecy
      tags:
      - module
  /v1/module/{id}/submodule:
    post:
      consumes:
      - application/json
      description: |-
        add submodule
        that can do only admin
      parameters:
      - description: SubModule info
        in: body
        name: submodule
        required: true
        schema:
          $ref: '#/definitions/module.AddSubModuleReq'
      - description: id of module
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/module.AddSubModuleResp'
        "400":
          description: some user error
          schema:
            $ref: '#/definitions/err.Error'
        "401":
          description: not auth
          schema:
            $ref: '#/definitions/err.Error'
        "404":
          description: module not found
          schema:
            $ref: '#/definitions/err.Error'
        "500":
          description: internal
          schema:
            $ref: '#/definitions/err.Error'
      security:
      - ApiKeyAuth: []
      summary: add submodule
      tags:
      - module
  /v1/module/{id}/test:
    post:
      consumes:
      - application/json
      description: |-
        add module test
        that can do only admin
      parameters:
      - description: ModuleTest info
        in: body
        name: moduletest
        required: true
        schema:
          $ref: '#/definitions/module.AddModuleTestReq'
      - description: id of module
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/module.AddModuleTestResp'
        "400":
          description: some user error
          schema:
            $ref: '#/definitions/err.Error'
        "401":
          description: not auth
          schema:
            $ref: '#/definitions/err.Error'
        "404":
          description: module not found
          schema:
            $ref: '#/definitions/err.Error'
        "500":
          description: internal
          schema:
            $ref: '#/definitions/err.Error'
      security:
      - ApiKeyAuth: []
      summary: add module test
      tags:
      - module
  /v1/module/{id}/test/pract:
    delete:
      description: delete Pract test
      parameters:
      - description: id of module
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: ""
        "400":
          description: some user error
          schema:
            $ref: '#/definitions/err.Error'
        "401":
          description: not auth
          schema:
            $ref: '#/definitions/err.Error'
        "404":
          description: module not found
          schema:
            $ref: '#/definitions/err.Error'
        "500":
          description: internal
          schema:
            $ref: '#/definitions/err.Error'
      security:
      - ApiKeyAuth: []
      summary: delete Pract test
      tags:
      - module
    put:
      consumes:
      - application/json
      description: |-
        update Pract test to module test
        that can do only admin
      parameters:
      - description: Pract test info
        in: body
        name: theotest
        required: true
        schema:
          $ref: '#/definitions/module.UpdateModuleConfigReq'
      - description: id of module
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/module.AddModulePractTestResp'
        "400":
          description: some user error
          schema:
            $ref: '#/definitions/err.Error'
        "401":
          description: not auth
          schema:
            $ref: '#/definitions/err.Error'
        "404":
          description: module not found
          schema:
            $ref: '#/definitions/err.Error'
        "500":
          description: internal
          schema:
            $ref: '#/definitions/err.Error'
      security:
      - ApiKeyAuth: []
      summary: update Pract test
      tags:
      - module
  /v1/module/{id}/test/theor:
    delete:
      description: delete Theor test
      parameters:
      - description: id of module
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: ""
        "400":
          description: some user error
          schema:
            $ref: '#/definitions/err.Error'
        "401":
          description: not auth
          schema:
            $ref: '#/definitions/err.Error'
        "404":
          description: module not found
          schema:
            $ref: '#/definitions/err.Error'
        "500":
          description: internal
          schema:
            $ref: '#/definitions/err.Error'
      security:
      - ApiKeyAuth: []
      summary: delete Theor test
      tags:
      - module
    put:
      consumes:
      - application/json
      description: update Theor test
      parameters:
      - description: Theor test info
        in: body
        name: theortest
        required: true
        schema:
          $ref: '#/definitions/module.UpdateModuleTheorTestReq'
      - description: id of module
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/module.AddModuleTheorTestResp'
        "400":
          description: some user error
          schema:
            $ref: '#/definitions/err.Error'
        "401":
          description: not auth
          schema:
            $ref: '#/definitions/err.Error'
        "404":
          description: module not found
          schema:
            $ref: '#/definitions/err.Error'
        "500":
          description: internal
          schema:
            $ref: '#/definitions/err.Error'
      security:
      - ApiKeyAuth: []
      summary: update Theor test
      tags:
      - module
  /v1/module/{id}/test/theor/try:
    post:
      consumes:
      - application/json
      parameters:
      - description: ModuleTest info
        in: body
        name: moduletest
        required: true
        schema:
          $ref: '#/definitions/module.TryTheoreticalTestReq'
      - description: id of module
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/module.TryTheoreticalTestResp'
        "400":
          description: some user error
          schema:
            $ref: '#/definitions/err.Error'
        "401":
          description: not auth
          schema:
            $ref: '#/definitions/err.Error'
        "404":
          description: module not found
          schema:
            $ref: '#/definitions/err.Error'
        "500":
          description: internal
          schema:
            $ref: '#/definitions/err.Error'
      security:
      - ApiKeyAuth: []
      summary: try module theor test
      tags:
      - module
  /v1/module/submodule/{id}:
    get:
      description: get sub module
      parameters:
      - description: id of submodule
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/module.GetSubModuleResp'
        "400":
          description: some user error
          schema:
            $ref: '#/definitions/err.Error'
        "401":
          description: not auth
          schema:
            $ref: '#/definitions/err.Error'
        "404":
          description: module not found
          schema:
            $ref: '#/definitions/err.Error'
        "500":
          description: internal
          schema:
            $ref: '#/definitions/err.Error'
      security:
      - ApiKeyAuth: []
      summary: get sub module
      tags:
      - module
  /v1/module/submodule/{id}/test:
    post:
      consumes:
      - application/json
      description: |-
        add submodule test
        that can do only admin
      parameters:
      - description: SubModuleTest info
        in: body
        name: submoduletest
        required: true
        schema:
          $ref: '#/definitions/module.AddSubModuleTestReq'
      - description: id of submodule
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/module.AddSubModuleTestResp'
        "400":
          description: some user error
          schema:
            $ref: '#/definitions/err.Error'
        "401":
          description: not auth
          schema:
            $ref: '#/definitions/err.Error'
        "404":
          description: module not found
          schema:
            $ref: '#/definitions/err.Error'
        "500":
          description: internal
          schema:
            $ref: '#/definitions/err.Error'
      security:
      - ApiKeyAuth: []
      summary: add submodule test
      tags:
      - module
  /v1/module/submodule/{id}/test/pract:
    delete:
      description: delete Pract test
      parameters:
      - description: id of submodule
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: ""
        "400":
          description: some user error
          schema:
            $ref: '#/definitions/err.Error'
        "401":
          description: not auth
          schema:
            $ref: '#/definitions/err.Error'
        "404":
          description: module not found
          schema:
            $ref: '#/definitions/err.Error'
        "500":
          description: internal
          schema:
            $ref: '#/definitions/err.Error'
      security:
      - ApiKeyAuth: []
      summary: delete Pract test
      tags:
      - module
    post:
      consumes:
      - application/json
      description: |-
        add Pract test to submodule test
        that can do only admin
      parameters:
      - description: Pract test info
        in: body
        name: theotest
        required: true
        schema:
          $ref: '#/definitions/module.AddPractTestReq'
      - description: id of submodule
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/module.AddPractTestResp'
        "400":
          description: some user error
          schema:
            $ref: '#/definitions/err.Error'
        "401":
          description: not auth
          schema:
            $ref: '#/definitions/err.Error'
        "404":
          description: module not found
          schema:
            $ref: '#/definitions/err.Error'
        "500":
          description: internal
          schema:
            $ref: '#/definitions/err.Error'
      security:
      - ApiKeyAuth: []
      summary: add Pract test
      tags:
      - module
    put:
      consumes:
      - application/json
      description: |-
        update Pract test to submodule test
        that can do only admin
      parameters:
      - description: Pract test info
        in: body
        name: theotest
        required: true
        schema:
          $ref: '#/definitions/module.UpdateConfigReq'
      - description: id of submodule
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/module.AddPractTestResp'
        "400":
          description: some user error
          schema:
            $ref: '#/definitions/err.Error'
        "401":
          description: not auth
          schema:
            $ref: '#/definitions/err.Error'
        "404":
          description: module not found
          schema:
            $ref: '#/definitions/err.Error'
        "500":
          description: internal
          schema:
            $ref: '#/definitions/err.Error'
      security:
      - ApiKeyAuth: []
      summary: update Pract test
      tags:
      - module
  /v1/module/submodule/{id}/test/theor:
    delete:
      description: delete Theor test
      parameters:
      - description: id of submodule
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: ""
        "400":
          description: some user error
          schema:
            $ref: '#/definitions/err.Error'
        "401":
          description: not auth
          schema:
            $ref: '#/definitions/err.Error'
        "404":
          description: module not found
          schema:
            $ref: '#/definitions/err.Error'
        "500":
          description: internal
          schema:
            $ref: '#/definitions/err.Error'
      security:
      - ApiKeyAuth: []
      summary: delete Theor test
      tags:
      - module
    post:
      consumes:
      - application/json
      description: |-
        add theor test to submodule test
        that can do only admin
      parameters:
      - description: Theor test info
        in: body
        name: theotest
        required: true
        schema:
          $ref: '#/definitions/module.AddTheorTestReq'
      - description: id of submodule
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/module.AddTheorTestResp'
        "400":
          description: some user error
          schema:
            $ref: '#/definitions/err.Error'
        "401":
          description: not auth
          schema:
            $ref: '#/definitions/err.Error'
        "404":
          description: module not found
          schema:
            $ref: '#/definitions/err.Error'
        "500":
          description: internal
          schema:
            $ref: '#/definitions/err.Error'
      security:
      - ApiKeyAuth: []
      summary: add theor test
      tags:
      - module
    put:
      consumes:
      - application/json
      description: update Theor test
      parameters:
      - description: Theor test info
        in: body
        name: theortest
        required: true
        schema:
          $ref: '#/definitions/module.UpdateTheorTestReq'
      - description: id of submodule
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/module.AddTheorTestResp'
        "400":
          description: some user error
          schema:
            $ref: '#/definitions/err.Error'
        "401":
          description: not auth
          schema:
            $ref: '#/definitions/err.Error'
        "404":
          description: module not found
          schema:
            $ref: '#/definitions/err.Error'
        "500":
          description: internal
          schema:
            $ref: '#/definitions/err.Error'
      security:
      - ApiKeyAuth: []
      summary: update Theor test
      tags:
      - module
  /v1/module/test/theor/try/{id}:
    post:
      consumes:
      - application/json
      parameters:
      - description: ModuleTest info
        in: body
        name: moduletest
        required: true
        schema:
          $ref: '#/definitions/module.TryAnswerQuestionReq'
      - description: id of try
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: ""
        "400":
          description: some user error
          schema:
            $ref: '#/definitions/err.Error'
        "401":
          description: not auth
          schema:
            $ref: '#/definitions/err.Error'
        "404":
          description: module not found
          schema:
            $ref: '#/definitions/err.Error'
        "500":
          description: internal
          schema:
            $ref: '#/definitions/err.Error'
      security:
      - ApiKeyAuth: []
      summary: try module theor test
      tags:
      - module
  /v1/user:
    get:
      description: get users
      parameters:
      - description: match user on login field
        in: query
        name: login
        type: string
      - description: match user on role
        in: query
        name: role
        type: string
      - description: limit
        in: query
        name: limit
        type: integer
      - description: offset
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: users
          schema:
            $ref: '#/definitions/user.GetUsersResponce'
        "400":
          description: some user error
          schema:
            $ref: '#/definitions/err.Error'
        "401":
          description: not auth
          schema:
            $ref: '#/definitions/err.Error'
        "404":
          description: user not found
          schema:
            $ref: '#/definitions/err.Error'
        "500":
          description: internal
          schema:
            $ref: '#/definitions/err.Error'
      security:
      - ApiKeyAuth: []
      summary: get users
      tags:
      - user
    post:
      consumes:
      - application/json
      description: |-
        create user with role
        that can do only admin
      parameters:
      - description: User info
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/user.CreateUserReq'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/user.CreateUserResp'
        "400":
          description: some user error
          schema:
            $ref: '#/definitions/err.Error'
        "401":
          description: not auth
          schema:
            $ref: '#/definitions/err.Error'
        "500":
          description: internal
          schema:
            $ref: '#/definitions/err.Error'
      security:
      - ApiKeyAuth: []
      summary: create user
      tags:
      - user
  /v1/user/{id}:
    delete:
      description: |-
        delete user
        that can do only admin
      parameters:
      - description: User id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: ""
        "400":
          description: some user error
          schema:
            $ref: '#/definitions/err.Error'
        "401":
          description: not auth
          schema:
            $ref: '#/definitions/err.Error'
        "404":
          description: user not found
          schema:
            $ref: '#/definitions/err.Error'
        "500":
          description: internal
          schema:
            $ref: '#/definitions/err.Error'
      security:
      - ApiKeyAuth: []
      summary: delete user
      tags:
      - user
    put:
      description: |-
        update user
        it can do this user or admin
      parameters:
      - description: User id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: ""
        "400":
          description: some user error
          schema:
            $ref: '#/definitions/err.Error'
        "401":
          description: not auth
          schema:
            $ref: '#/definitions/err.Error'
        "404":
          description: user not found
          schema:
            $ref: '#/definitions/err.Error'
        "500":
          description: internal
          schema:
            $ref: '#/definitions/err.Error'
      security:
      - ApiKeyAuth: []
      summary: update user
      tags:
      - user
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
